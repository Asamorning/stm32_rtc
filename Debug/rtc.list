
rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005514  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005724  08005724  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005724  08005724  00015724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800572c  0800572c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000068  0800579c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800579c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbfc  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d95  00000000  00000000  0002bcd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  0002da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000866  00000000  00000000  0002e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bc5  00000000  00000000  0002eda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd6a  00000000  00000000  0004596b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a006  00000000  00000000  000536d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003418  00000000  00000000  000dd6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e0af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800569c 	.word	0x0800569c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800569c 	.word	0x0800569c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <BCD2Decimal>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t BCD2Decimal(uint8_t inData) {
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = inData >> 4;		//	상위 bit
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	091b      	lsrs	r3, r3, #4
 800058a:	73fb      	strb	r3, [r7, #15]
	uint8_t lower = inData & 0x0f;		//	하위 bit
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f003 030f 	and.w	r3, r3, #15
 8000592:	73bb      	strb	r3, [r7, #14]
	return upper * 10 + lower;
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	461a      	mov	r2, r3
 8000598:	0092      	lsls	r2, r2, #2
 800059a:	4413      	add	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	7bbb      	ldrb	r3, [r7, #14]
 80005a2:	4413      	add	r3, r2
 80005a4:	b2db      	uxtb	r3, r3
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <Decimal2BCD>:

uint8_t Decimal2BCD(uint8_t inData) {
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = inData / 10;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <Decimal2BCD+0x48>)
 80005c2:	fba2 2303 	umull	r2, r3, r2, r3
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	73fb      	strb	r3, [r7, #15]
	uint8_t lower = inData % 10;
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <Decimal2BCD+0x48>)
 80005ce:	fba3 1302 	umull	r1, r3, r3, r2
 80005d2:	08d9      	lsrs	r1, r3, #3
 80005d4:	460b      	mov	r3, r1
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	73bb      	strb	r3, [r7, #14]
	return upper << 4 | lower;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	b25a      	sxtb	r2, r3
 80005e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	b2db      	uxtb	r3, r3
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	cccccccd 	.word	0xcccccccd

08000600 <setRTC>:
//	EEPROM Map Table ▶ 왜 작성해야 하나?
#define	eeMagicNumberBase		0
#define	eeMagicNumberSize		4


void setRTC(DateTime_t inData)		{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	463b      	mov	r3, r7
 8000608:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t txBuffer[8];
	txBuffer[7] = Decimal2BCD(inData.year);
 800060c:	783b      	ldrb	r3, [r7, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffd0 	bl	80005b4 <Decimal2BCD>
 8000614:	4603      	mov	r3, r0
 8000616:	73fb      	strb	r3, [r7, #15]
	txBuffer[6] = Decimal2BCD(inData.month);
 8000618:	787b      	ldrb	r3, [r7, #1]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffca 	bl	80005b4 <Decimal2BCD>
 8000620:	4603      	mov	r3, r0
 8000622:	73bb      	strb	r3, [r7, #14]
	txBuffer[5] = Decimal2BCD(inData.date);
 8000624:	78bb      	ldrb	r3, [r7, #2]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffc4 	bl	80005b4 <Decimal2BCD>
 800062c:	4603      	mov	r3, r0
 800062e:	737b      	strb	r3, [r7, #13]
	txBuffer[3] = Decimal2BCD(inData.hour);
 8000630:	793b      	ldrb	r3, [r7, #4]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffbe 	bl	80005b4 <Decimal2BCD>
 8000638:	4603      	mov	r3, r0
 800063a:	72fb      	strb	r3, [r7, #11]
	txBuffer[2] = Decimal2BCD(inData.min);
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffb8 	bl	80005b4 <Decimal2BCD>
 8000644:	4603      	mov	r3, r0
 8000646:	72bb      	strb	r3, [r7, #10]
	txBuffer[1] = Decimal2BCD(inData.sec);
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffb2 	bl	80005b4 <Decimal2BCD>
 8000650:	4603      	mov	r3, r0
 8000652:	727b      	strb	r3, [r7, #9]
	txBuffer[0] = 0;		// 시작 Address
 8000654:	2300      	movs	r3, #0
 8000656:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADD, txBuffer, sizeof(txBuffer), 10);
 8000658:	f107 0208 	add.w	r2, r7, #8
 800065c:	230a      	movs	r3, #10
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2308      	movs	r3, #8
 8000662:	21d0      	movs	r1, #208	; 0xd0
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <setRTC+0x74>)
 8000666:	f001 f8d3 	bl	8001810 <HAL_I2C_Master_Transmit>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000084 	.word	0x20000084

08000678 <getRTC>:

DateTime_t getRTC()	{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	DateTime_t result;
	uint8_t	rxBuffer[7];
	uint8_t	address = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, RTC_ADD, &address, 1, 10);				 // 시작 Address setting
 8000684:	f107 020f 	add.w	r2, r7, #15
 8000688:	230a      	movs	r3, #10
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2301      	movs	r3, #1
 800068e:	21d0      	movs	r1, #208	; 0xd0
 8000690:	481e      	ldr	r0, [pc, #120]	; (800070c <getRTC+0x94>)
 8000692:	f001 f8bd 	bl	8001810 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, RTC_ADD | READ, rxBuffer, 7, 10);
 8000696:	f107 0210 	add.w	r2, r7, #16
 800069a:	230a      	movs	r3, #10
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2307      	movs	r3, #7
 80006a0:	21d1      	movs	r1, #209	; 0xd1
 80006a2:	481a      	ldr	r0, [pc, #104]	; (800070c <getRTC+0x94>)
 80006a4:	f001 f9b2 	bl	8001a0c <HAL_I2C_Master_Receive>
	result.year = BCD2Decimal(rxBuffer[6]);
 80006a8:	7dbb      	ldrb	r3, [r7, #22]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff66 	bl	800057c <BCD2Decimal>
 80006b0:	4603      	mov	r3, r0
 80006b2:	763b      	strb	r3, [r7, #24]
	result.month = BCD2Decimal(rxBuffer[5]);
 80006b4:	7d7b      	ldrb	r3, [r7, #21]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff60 	bl	800057c <BCD2Decimal>
 80006bc:	4603      	mov	r3, r0
 80006be:	767b      	strb	r3, [r7, #25]
	result.date = BCD2Decimal(rxBuffer[4]);
 80006c0:	7d3b      	ldrb	r3, [r7, #20]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff5a 	bl	800057c <BCD2Decimal>
 80006c8:	4603      	mov	r3, r0
 80006ca:	76bb      	strb	r3, [r7, #26]
	result.hour = BCD2Decimal(rxBuffer[2]);
 80006cc:	7cbb      	ldrb	r3, [r7, #18]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff54 	bl	800057c <BCD2Decimal>
 80006d4:	4603      	mov	r3, r0
 80006d6:	773b      	strb	r3, [r7, #28]
	result.min = BCD2Decimal(rxBuffer[1]);
 80006d8:	7c7b      	ldrb	r3, [r7, #17]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff4e 	bl	800057c <BCD2Decimal>
 80006e0:	4603      	mov	r3, r0
 80006e2:	777b      	strb	r3, [r7, #29]
	result.sec = BCD2Decimal(rxBuffer[0]);
 80006e4:	7c3b      	ldrb	r3, [r7, #16]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff48 	bl	800057c <BCD2Decimal>
 80006ec:	4603      	mov	r3, r0
 80006ee:	77bb      	strb	r3, [r7, #30]
	return result;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	6010      	str	r0, [r2, #0]
 80006fc:	8899      	ldrh	r1, [r3, #4]
 80006fe:	799b      	ldrb	r3, [r3, #6]
 8000700:	8091      	strh	r1, [r2, #4]
 8000702:	7193      	strb	r3, [r2, #6]
}
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000084 	.word	0x20000084

08000710 <write4ByteEEPROM>:
	uint16_t result;
	HAL_I2C_Mem_Read(&hi2c1, ROM_ADD, address, 2, &result, 2, 10);
	return result;
}

void write4ByteEEPROM(uint16_t address, uint32_t data) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af04      	add	r7, sp, #16
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, ROM_ADD, address, 2, &data, 4, 10);
 800071c:	88fa      	ldrh	r2, [r7, #6]
 800071e:	230a      	movs	r3, #10
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	2304      	movs	r3, #4
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	463b      	mov	r3, r7
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2302      	movs	r3, #2
 800072c:	21a0      	movs	r1, #160	; 0xa0
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <write4ByteEEPROM+0x34>)
 8000730:	f001 fb9e 	bl	8001e70 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8000734:	2014      	movs	r0, #20
 8000736:	f000 fbdb 	bl	8000ef0 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000084 	.word	0x20000084

08000748 <read4ByteEEPROM>:

uint32_t read4ByteEEPROM(uint16_t address) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af04      	add	r7, sp, #16
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
	uint32_t result;
	HAL_I2C_Mem_Read(&hi2c1, ROM_ADD, address, 2, &result, 4, 10);
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	230a      	movs	r3, #10
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	2304      	movs	r3, #4
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2302      	movs	r3, #2
 8000764:	21a0      	movs	r1, #160	; 0xa0
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <read4ByteEEPROM+0x30>)
 8000768:	f001 fc7c 	bl	8002064 <HAL_I2C_Mem_Read>
	return result;
 800076c:	68fb      	ldr	r3, [r7, #12]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000084 	.word	0x20000084

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b5b0      	push	{r4, r5, r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000782:	f000 fb43 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000786:	f000 f847 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f8fb 	bl	8000984 <MX_GPIO_Init>
  MX_I2C1_Init();
 800078e:	f000 f8a1 	bl	80008d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000792:	f000 f8cd 	bl	8000930 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	initUart(&huart2);
 8000796:	481d      	ldr	r0, [pc, #116]	; (800080c <main+0x90>)
 8000798:	f000 fab0 	bl	8000cfc <initUart>
	DateTime_t datetime;
	if(MagicNumber != read4ByteEEPROM(eeMagicNumberBase))	{
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ffd3 	bl	8000748 <read4ByteEEPROM>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <main+0x94>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d014      	beq.n	80007d4 <main+0x58>
		// ▼ 초기 설정
		datetime.year		  =  24;
 80007aa:	2318      	movs	r3, #24
 80007ac:	703b      	strb	r3, [r7, #0]
		datetime.month	=	3;
 80007ae:	2303      	movs	r3, #3
 80007b0:	707b      	strb	r3, [r7, #1]
		datetime.date			=	29;
 80007b2:	231d      	movs	r3, #29
 80007b4:	70bb      	strb	r3, [r7, #2]
		datetime.hour		=	14;
 80007b6:	230e      	movs	r3, #14
 80007b8:	713b      	strb	r3, [r7, #4]
		datetime.min			=	28;
 80007ba:	231c      	movs	r3, #28
 80007bc:	717b      	strb	r3, [r7, #5]
		datetime.sec			=	0;
 80007be:	2300      	movs	r3, #0
 80007c0:	71bb      	strb	r3, [r7, #6]
		setRTC(datetime);
 80007c2:	463b      	mov	r3, r7
 80007c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007c8:	f7ff ff1a 	bl	8000600 <setRTC>
		//	매직 넘버가 없다면, 매 초기화마다 이 시간으로 돌아올 것

		//	매직 넘버 기록
		write4ByteEEPROM(eeMagicNumberBase, MagicNumber);
 80007cc:	4910      	ldr	r1, [pc, #64]	; (8000810 <main+0x94>)
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff9e 	bl	8000710 <write4ByteEEPROM>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		datetime = getRTC();
 80007d4:	463b      	mov	r3, r7
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff4e 	bl	8000678 <getRTC>
		printf("20%02d-%02d-%02d %02d:%02d:%02d\n",
				datetime.year,
 80007dc:	783b      	ldrb	r3, [r7, #0]
		printf("20%02d-%02d-%02d %02d:%02d:%02d\n",
 80007de:	4618      	mov	r0, r3
				datetime.month,
 80007e0:	787b      	ldrb	r3, [r7, #1]
		printf("20%02d-%02d-%02d %02d:%02d:%02d\n",
 80007e2:	461c      	mov	r4, r3
				datetime.date,
 80007e4:	78bb      	ldrb	r3, [r7, #2]
		printf("20%02d-%02d-%02d %02d:%02d:%02d\n",
 80007e6:	461d      	mov	r5, r3
				datetime.hour,
 80007e8:	793b      	ldrb	r3, [r7, #4]
				datetime.min,
 80007ea:	797a      	ldrb	r2, [r7, #5]
				datetime.sec);
 80007ec:	79b9      	ldrb	r1, [r7, #6]
		printf("20%02d-%02d-%02d %02d:%02d:%02d\n",
 80007ee:	9102      	str	r1, [sp, #8]
 80007f0:	9201      	str	r2, [sp, #4]
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	462b      	mov	r3, r5
 80007f6:	4622      	mov	r2, r4
 80007f8:	4601      	mov	r1, r0
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <main+0x98>)
 80007fc:	f004 f8d8 	bl	80049b0 <iprintf>
		HAL_Delay(1000);
 8000800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000804:	f000 fb74 	bl	8000ef0 <HAL_Delay>
	while (1) {
 8000808:	e7e4      	b.n	80007d4 <main+0x58>
 800080a:	bf00      	nop
 800080c:	200000d8 	.word	0x200000d8
 8000810:	257fad1e 	.word	0x257fad1e
 8000814:	080056b4 	.word	0x080056b4

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 f917 	bl	8004a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <SystemClock_Config+0xb4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <SystemClock_Config+0xb4>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <SystemClock_Config+0xb4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <SystemClock_Config+0xb8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <SystemClock_Config+0xb8>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <SystemClock_Config+0xb8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000880:	2300      	movs	r3, #0
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fb21 	bl	8002ed0 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000894:	f000 f89e 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fd84 	bl	80033c0 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008be:	f000 f889 	bl	80009d4 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_Init+0x50>)
 80008da:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_I2C1_Init+0x54>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_Init+0x50>)
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_I2C1_Init+0x58>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_I2C1_Init+0x50>)
 80008f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_I2C1_Init+0x50>)
 8000912:	f000 fe39 	bl	8001588 <HAL_I2C_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 f85a 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000084 	.word	0x20000084
 8000928:	40005400 	.word	0x40005400
 800092c:	000186a0 	.word	0x000186a0

08000930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART2_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x4c>)
 8000968:	f002 ff0a 	bl	8003780 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f82f 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000d8 	.word	0x200000d8
 8000980:	40004400 	.word	0x40004400

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_GPIO_Init+0x4c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x4c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_GPIO_Init+0x4c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_GPIO_Init+0x4c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <MX_GPIO_Init+0x4c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_GPIO_Init+0x4c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_I2C_MspInit+0x84>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12b      	bne.n	8000aaa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a6e:	23c0      	movs	r3, #192	; 0xc0
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a72:	2312      	movs	r3, #18
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <HAL_I2C_MspInit+0x8c>)
 8000a8a:	f000 fbf9 	bl	8001280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_UART_MspInit+0x94>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d133      	bne.n	8000b4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_UART_MspInit+0x98>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <HAL_UART_MspInit+0x9c>)
 8000b36:	f000 fba3 	bl	8001280 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2026      	movs	r0, #38	; 0x26
 8000b40:	f000 fad5 	bl	80010ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b44:	2026      	movs	r0, #38	; 0x26
 8000b46:	f000 faee 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f980 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <USART2_IRQHandler+0x10>)
 8000bba:	f002 fee1 	bl	8003980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000d8 	.word	0x200000d8

08000bc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f003 ff2c 	bl	8004af8 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20020000 	.word	0x20020000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000120 	.word	0x20000120
 8000cd4:	20000380 	.word	0x20000380

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <initUart>:
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// init device
void initUart(UART_HandleTypeDef *inHuart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <initUart+0x24>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <initUart+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <initUart+0x28>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fe0f 	bl	8003936 <HAL_UART_Receive_IT>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000124 	.word	0x20000124
 8000d24:	2000022b 	.word	0x2000022b

08000d28 <HAL_UART_RxCpltCallback>:

// process received charactor
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_UART_RxCpltCallback+0x50>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	4910      	ldr	r1, [pc, #64]	; (8000d78 <HAL_UART_RxCpltCallback+0x50>)
 8000d38:	600a      	str	r2, [r1, #0]
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_UART_RxCpltCallback+0x54>)
 8000d3c:	7811      	ldrb	r1, [r2, #0]
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_UART_RxCpltCallback+0x58>)
 8000d40:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_UART_RxCpltCallback+0x50>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <HAL_UART_RxCpltCallback+0x5c>)
 8000d48:	fb83 1302 	smull	r1, r3, r3, r2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	11d9      	asrs	r1, r3, #7
 8000d50:	17d3      	asrs	r3, r2, #31
 8000d52:	1ac9      	subs	r1, r1, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	1ad1      	subs	r1, r2, r3
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_UART_RxCpltCallback+0x50>)
 8000d5e:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_UART_RxCpltCallback+0x60>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4905      	ldr	r1, [pc, #20]	; (8000d7c <HAL_UART_RxCpltCallback+0x54>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fde4 	bl	8003936 <HAL_UART_Receive_IT>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000128 	.word	0x20000128
 8000d7c:	2000022b 	.word	0x2000022b
 8000d80:	2000012c 	.word	0x2000012c
 8000d84:	80808081 	.word	0x80808081
 8000d88:	20000124 	.word	0x20000124

08000d8c <_write>:
	rxBufferGp %= rxBufferMax;
	return result;
}

int _write(int file, char*p, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 100);
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <_write+0x28>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	f002 fd3c 	bl	8003820 <HAL_UART_Transmit>
	return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000124 	.word	0x20000124

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbc:	f7ff ff8c 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f003 fe8d 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fcc7 	bl	800077c <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dfc:	08005734 	.word	0x08005734
  ldr r2, =_sbss
 8000e00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e04:	2000037c 	.word	0x2000037c

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f94f 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fdce 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f967 	bl	8001142 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f92f 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	2000022c 	.word	0x2000022c

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000022c 	.word	0x2000022c

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff29 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff3e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff31 	bl	8000f9c <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa2 	bl	8001094 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff feb6 	bl	8000ed8 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d008      	beq.n	800118c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e052      	b.n	8001232 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0216 	bic.w	r2, r2, #22
 800119a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d103      	bne.n	80011bc <HAL_DMA_Abort+0x62>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0208 	bic.w	r2, r2, #8
 80011ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011dc:	e013      	b.n	8001206 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011de:	f7ff fe7b 	bl	8000ed8 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d90c      	bls.n	8001206 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2220      	movs	r2, #32
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e015      	b.n	8001232 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1e4      	bne.n	80011de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	223f      	movs	r2, #63	; 0x3f
 800121a:	409a      	lsls	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d004      	beq.n	8001258 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e00c      	b.n	8001272 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2205      	movs	r2, #5
 800125c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e159      	b.n	8001550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8148 	bne.w	800154a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d005      	beq.n	80012d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a2 	beq.w	800154a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b57      	ldr	r3, [pc, #348]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a56      	ldr	r2, [pc, #344]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b54      	ldr	r3, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001422:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_GPIO_Init+0x2ec>)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x202>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2f4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x1fe>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_GPIO_Init+0x2f8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x1fa>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a46      	ldr	r2, [pc, #280]	; (800157c <HAL_GPIO_Init+0x2fc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x1f6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a45      	ldr	r2, [pc, #276]	; (8001580 <HAL_GPIO_Init+0x300>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x1f2>
 800146e:	2304      	movs	r3, #4
 8001470:	e008      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001472:	2307      	movs	r3, #7
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001476:	2303      	movs	r3, #3
 8001478:	e004      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147a:	2302      	movs	r3, #2
 800147c:	e002      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001482:	2300      	movs	r3, #0
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	f002 0203 	and.w	r2, r2, #3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4093      	lsls	r3, r2
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001494:	4935      	ldr	r1, [pc, #212]	; (800156c <HAL_GPIO_Init+0x2ec>)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c6:	4a2f      	ldr	r2, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151a:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HAL_GPIO_Init+0x304>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_GPIO_Init+0x304>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_GPIO_Init+0x304>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3301      	adds	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	f67f aea2 	bls.w	800129c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40013800 	.word	0x40013800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40021000 	.word	0x40021000
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e12b      	b.n	80017f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fa3e 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2224      	movs	r2, #36	; 0x24
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015ec:	f002 f8a0 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 80015f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a81      	ldr	r2, [pc, #516]	; (80017fc <HAL_I2C_Init+0x274>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d807      	bhi.n	800160c <HAL_I2C_Init+0x84>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a80      	ldr	r2, [pc, #512]	; (8001800 <HAL_I2C_Init+0x278>)
 8001600:	4293      	cmp	r3, r2
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e006      	b.n	800161a <HAL_I2C_Init+0x92>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a7d      	ldr	r2, [pc, #500]	; (8001804 <HAL_I2C_Init+0x27c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	bf94      	ite	ls
 8001614:	2301      	movls	r3, #1
 8001616:	2300      	movhi	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0e7      	b.n	80017f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a78      	ldr	r2, [pc, #480]	; (8001808 <HAL_I2C_Init+0x280>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0c9b      	lsrs	r3, r3, #18
 800162c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	430a      	orrs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a6a      	ldr	r2, [pc, #424]	; (80017fc <HAL_I2C_Init+0x274>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d802      	bhi.n	800165c <HAL_I2C_Init+0xd4>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	e009      	b.n	8001670 <HAL_I2C_Init+0xe8>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	4a69      	ldr	r2, [pc, #420]	; (800180c <HAL_I2C_Init+0x284>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	3301      	adds	r3, #1
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	430b      	orrs	r3, r1
 8001676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	495c      	ldr	r1, [pc, #368]	; (80017fc <HAL_I2C_Init+0x274>)
 800168c:	428b      	cmp	r3, r1
 800168e:	d819      	bhi.n	80016c4 <HAL_I2C_Init+0x13c>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e59      	subs	r1, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fbb1 f3f3 	udiv	r3, r1, r3
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016a4:	400b      	ands	r3, r1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00a      	beq.n	80016c0 <HAL_I2C_Init+0x138>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1e59      	subs	r1, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016be:	e051      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e04f      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d111      	bne.n	80016f0 <HAL_I2C_Init+0x168>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	e012      	b.n	8001716 <HAL_I2C_Init+0x18e>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e58      	subs	r0, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	0099      	lsls	r1, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	fbb0 f3f3 	udiv	r3, r0, r3
 8001706:	3301      	adds	r3, #1
 8001708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Init+0x196>
 800171a:	2301      	movs	r3, #1
 800171c:	e022      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10e      	bne.n	8001744 <HAL_I2C_Init+0x1bc>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1e58      	subs	r0, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	440b      	add	r3, r1
 8001734:	fbb0 f3f3 	udiv	r3, r0, r3
 8001738:	3301      	adds	r3, #1
 800173a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001742:	e00f      	b.n	8001764 <HAL_I2C_Init+0x1dc>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1e58      	subs	r0, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	0099      	lsls	r1, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	fbb0 f3f3 	udiv	r3, r0, r3
 800175a:	3301      	adds	r3, #1
 800175c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	6809      	ldr	r1, [r1, #0]
 8001768:	4313      	orrs	r3, r2
 800176a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6911      	ldr	r1, [r2, #16]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68d2      	ldr	r2, [r2, #12]
 800179e:	4311      	orrs	r1, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	000186a0 	.word	0x000186a0
 8001800:	001e847f 	.word	0x001e847f
 8001804:	003d08ff 	.word	0x003d08ff
 8001808:	431bde83 	.word	0x431bde83
 800180c:	10624dd3 	.word	0x10624dd3

08001810 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	460b      	mov	r3, r1
 800181e:	817b      	strh	r3, [r7, #10]
 8001820:	4613      	mov	r3, r2
 8001822:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff fb58 	bl	8000ed8 <HAL_GetTick>
 8001828:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b20      	cmp	r3, #32
 8001834:	f040 80e0 	bne.w	80019f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2319      	movs	r3, #25
 800183e:	2201      	movs	r2, #1
 8001840:	4970      	ldr	r1, [pc, #448]	; (8001a04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f001 f90e 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800184e:	2302      	movs	r3, #2
 8001850:	e0d3      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x50>
 800185c:	2302      	movs	r3, #2
 800185e:	e0cc      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d007      	beq.n	8001886 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0201 	orr.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001894:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2221      	movs	r2, #33	; 0x21
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2210      	movs	r2, #16
 80018a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	893a      	ldrh	r2, [r7, #8]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <HAL_I2C_Master_Transmit+0x1f8>)
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fdfa 	bl	80024c8 <I2C_MasterRequestWrite>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e08d      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018f4:	e066      	b.n	80019c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	6a39      	ldr	r1, [r7, #32]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f001 f9cc 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00d      	beq.n	8001922 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2b04      	cmp	r3, #4
 800190c:	d107      	bne.n	800191e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06b      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	781a      	ldrb	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29b      	uxth	r3, r3
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b04      	cmp	r3, #4
 800195e:	d11b      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x188>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	d017      	beq.n	8001998 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f001 f9c3 	bl	8002d28 <I2C_WaitOnBTFFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d107      	bne.n	80019c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e01a      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d194      	bne.n	80018f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	00100002 	.word	0x00100002
 8001a08:	ffff0000 	.word	0xffff0000

08001a0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	817b      	strh	r3, [r7, #10]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff fa5a 	bl	8000ed8 <HAL_GetTick>
 8001a24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	f040 8217 	bne.w	8001e62 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2319      	movs	r3, #25
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	497c      	ldr	r1, [pc, #496]	; (8001c30 <HAL_I2C_Master_Receive+0x224>)
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f001 f810 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e20a      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_I2C_Master_Receive+0x50>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e203      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d007      	beq.n	8001a82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2222      	movs	r2, #34	; 0x22
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	893a      	ldrh	r2, [r7, #8]
 8001ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4a5c      	ldr	r2, [pc, #368]	; (8001c34 <HAL_I2C_Master_Receive+0x228>)
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ac4:	8979      	ldrh	r1, [r7, #10]
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fd7e 	bl	80025cc <I2C_MasterRequestRead>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1c4      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d113      	bne.n	8001b0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	623b      	str	r3, [r7, #32]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	623b      	str	r3, [r7, #32]
 8001af6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e198      	b.n	8001e3c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d11b      	bne.n	8001b4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e178      	b.n	8001e3c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d11b      	bne.n	8001b8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	e158      	b.n	8001e3c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001bb0:	e144      	b.n	8001e3c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	f200 80f1 	bhi.w	8001d9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d123      	bne.n	8001c0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f001 f8f5 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e145      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c0a:	e117      	b.n	8001e3c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d14e      	bne.n	8001cb2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <HAL_I2C_Master_Receive+0x22c>)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 ff20 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e11a      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
 8001c2e:	bf00      	nop
 8001c30:	00100002 	.word	0x00100002
 8001c34:	ffff0000 	.word	0xffff0000
 8001c38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cb0:	e0c4      	b.n	8001e3c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	2200      	movs	r2, #0
 8001cba:	496c      	ldr	r1, [pc, #432]	; (8001e6c <HAL_I2C_Master_Receive+0x460>)
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fed1 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0cb      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	2200      	movs	r2, #0
 8001d16:	4955      	ldr	r1, [pc, #340]	; (8001e6c <HAL_I2C_Master_Receive+0x460>)
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fea3 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e09d      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d9c:	e04e      	b.n	8001e3c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f001 f808 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e058      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d124      	bne.n	8001e3c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e08:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f aeb6 	bne.w	8001bb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00010004 	.word	0x00010004

08001e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	817b      	strh	r3, [r7, #10]
 8001e82:	460b      	mov	r3, r1
 8001e84:	813b      	strh	r3, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e8a:	f7ff f825 	bl	8000ed8 <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	f040 80d9 	bne.w	8002050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2319      	movs	r3, #25
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	496d      	ldr	r1, [pc, #436]	; (800205c <HAL_I2C_Mem_Write+0x1ec>)
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fddb 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e0cc      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Mem_Write+0x56>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0c5      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d007      	beq.n	8001eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2221      	movs	r2, #33	; 0x21
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_I2C_Mem_Write+0x1f0>)
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f2e:	88f8      	ldrh	r0, [r7, #6]
 8001f30:	893a      	ldrh	r2, [r7, #8]
 8001f32:	8979      	ldrh	r1, [r7, #10]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fc12 	bl	8002768 <I2C_RequestMemoryWrite>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d052      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e081      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fea0 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d107      	bne.n	8001f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_I2C_Mem_Write+0x180>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d017      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1aa      	bne.n	8001f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fe93 	bl	8002d28 <I2C_WaitOnBTFFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e016      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	00100002 	.word	0x00100002
 8002060:	ffff0000 	.word	0xffff0000

08002064 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4603      	mov	r3, r0
 8002074:	817b      	strh	r3, [r7, #10]
 8002076:	460b      	mov	r3, r1
 8002078:	813b      	strh	r3, [r7, #8]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800207e:	f7fe ff2b 	bl	8000ed8 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b20      	cmp	r3, #32
 800208e:	f040 8214 	bne.w	80024ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2319      	movs	r3, #25
 8002098:	2201      	movs	r2, #1
 800209a:	497b      	ldr	r1, [pc, #492]	; (8002288 <HAL_I2C_Mem_Read+0x224>)
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fce1 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
 80020aa:	e207      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Mem_Read+0x56>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e200      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d007      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2222      	movs	r2, #34	; 0x22
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <HAL_I2C_Mem_Read+0x228>)
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002122:	88f8      	ldrh	r0, [r7, #6]
 8002124:	893a      	ldrh	r2, [r7, #8]
 8002126:	8979      	ldrh	r1, [r7, #10]
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4603      	mov	r3, r0
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fbae 	bl	8002894 <I2C_RequestMemoryRead>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1bc      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	d113      	bne.n	8002172 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e190      	b.n	8002494 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	2b01      	cmp	r3, #1
 8002178:	d11b      	bne.n	80021b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e170      	b.n	8002494 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d11b      	bne.n	80021f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	e150      	b.n	8002494 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002208:	e144      	b.n	8002494 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	2b03      	cmp	r3, #3
 8002210:	f200 80f1 	bhi.w	80023f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	2b01      	cmp	r3, #1
 800221a:	d123      	bne.n	8002264 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fdc9 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e145      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002262:	e117      	b.n	8002494 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	2b02      	cmp	r3, #2
 800226a:	d14e      	bne.n	800230a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	2200      	movs	r2, #0
 8002274:	4906      	ldr	r1, [pc, #24]	; (8002290 <HAL_I2C_Mem_Read+0x22c>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fbf4 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e11a      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
 8002286:	bf00      	nop
 8002288:	00100002 	.word	0x00100002
 800228c:	ffff0000 	.word	0xffff0000
 8002290:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002308:	e0c4      	b.n	8002494 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	2200      	movs	r2, #0
 8002312:	496c      	ldr	r1, [pc, #432]	; (80024c4 <HAL_I2C_Mem_Read+0x460>)
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fba5 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0cb      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236c:	2200      	movs	r2, #0
 800236e:	4955      	ldr	r1, [pc, #340]	; (80024c4 <HAL_I2C_Mem_Read+0x460>)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fb77 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e09d      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f4:	e04e      	b.n	8002494 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fcdc 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e058      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d124      	bne.n	8002494 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	2b03      	cmp	r3, #3
 8002450:	d107      	bne.n	8002462 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f aeb6 	bne.w	800220a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	00010004 	.word	0x00010004

080024c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	460b      	mov	r3, r1
 80024d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d006      	beq.n	80024f2 <I2C_MasterRequestWrite+0x2a>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d003      	beq.n	80024f2 <I2C_MasterRequestWrite+0x2a>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024f0:	d108      	bne.n	8002504 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e00b      	b.n	800251c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b12      	cmp	r3, #18
 800250a:	d107      	bne.n	800251c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fa9b 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002542:	d103      	bne.n	800254c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e035      	b.n	80025bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002558:	d108      	bne.n	800256c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800255a:	897b      	ldrh	r3, [r7, #10]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	e01b      	b.n	80025a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800256c:	897b      	ldrh	r3, [r7, #10]
 800256e:	11db      	asrs	r3, r3, #7
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f003 0306 	and.w	r3, r3, #6
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f063 030f 	orn	r3, r3, #15
 800257c:	b2da      	uxtb	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	490e      	ldr	r1, [pc, #56]	; (80025c4 <I2C_MasterRequestWrite+0xfc>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fae4 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e010      	b.n	80025bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <I2C_MasterRequestWrite+0x100>)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fad4 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	00010008 	.word	0x00010008
 80025c8:	00010002 	.word	0x00010002

080025cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	460b      	mov	r3, r1
 80025da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d006      	beq.n	8002606 <I2C_MasterRequestRead+0x3a>
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d003      	beq.n	8002606 <I2C_MasterRequestRead+0x3a>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002604:	d108      	bne.n	8002618 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e00b      	b.n	8002630 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b11      	cmp	r3, #17
 800261e:	d107      	bne.n	8002630 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa11 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002656:	d103      	bne.n	8002660 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e079      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800266c:	d108      	bne.n	8002680 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e05f      	b.n	8002740 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	11db      	asrs	r3, r3, #7
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0306 	and.w	r3, r3, #6
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f063 030f 	orn	r3, r3, #15
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4930      	ldr	r1, [pc, #192]	; (8002760 <I2C_MasterRequestRead+0x194>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fa5a 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e054      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4929      	ldr	r1, [pc, #164]	; (8002764 <I2C_MasterRequestRead+0x198>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa4a 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e044      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f9af 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271a:	d103      	bne.n	8002724 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e017      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	11db      	asrs	r3, r3, #7
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0306 	and.w	r3, r3, #6
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f063 030e 	orn	r3, r3, #14
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <I2C_MasterRequestRead+0x198>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa06 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	00010008 	.word	0x00010008
 8002764:	00010002 	.word	0x00010002

08002768 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4603      	mov	r3, r0
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	460b      	mov	r3, r1
 800277c:	813b      	strh	r3, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2200      	movs	r2, #0
 800279a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f960 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b8:	d103      	bne.n	80027c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e05f      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	492d      	ldr	r1, [pc, #180]	; (8002890 <I2C_RequestMemoryWrite+0x128>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f9bb 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e04c      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	6a39      	ldr	r1, [r7, #32]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fa46 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00d      	beq.n	800282e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2b04      	cmp	r3, #4
 8002818:	d107      	bne.n	800282a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e02b      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002834:	893b      	ldrh	r3, [r7, #8]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	e021      	b.n	8002884 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002840:	893b      	ldrh	r3, [r7, #8]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fa20 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e005      	b.n	8002886 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800287a:	893b      	ldrh	r3, [r7, #8]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	00010002 	.word	0x00010002

08002894 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	817b      	strh	r3, [r7, #10]
 80028a6:	460b      	mov	r3, r1
 80028a8:	813b      	strh	r3, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8c2 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f4:	d103      	bne.n	80028fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0aa      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002902:	897b      	ldrh	r3, [r7, #10]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	4952      	ldr	r1, [pc, #328]	; (8002a60 <I2C_RequestMemoryRead+0x1cc>)
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f91d 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e097      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	6a39      	ldr	r1, [r7, #32]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f9a8 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b04      	cmp	r3, #4
 8002954:	d107      	bne.n	8002966 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e076      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002970:	893b      	ldrh	r3, [r7, #8]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	e021      	b.n	80029c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800297c:	893b      	ldrh	r3, [r7, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b29b      	uxth	r3, r3
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f982 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d107      	bne.n	80029b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e050      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029b6:	893b      	ldrh	r3, [r7, #8]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	6a39      	ldr	r1, [r7, #32]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f967 	bl	8002c98 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e035      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f82b 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a22:	d103      	bne.n	8002a2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e013      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	4906      	ldr	r1, [pc, #24]	; (8002a60 <I2C_RequestMemoryRead+0x1cc>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f886 	bl	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	00010002 	.word	0x00010002

08002a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a74:	e048      	b.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d044      	beq.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fe fa2b 	bl	8000ed8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d139      	bne.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10d      	bne.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	e00c      	b.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d116      	bne.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e023      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10d      	bne.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	e00c      	b.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	43da      	mvns	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d093      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b66:	e071      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d123      	bne.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e067      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d041      	beq.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc8:	f7fe f986 	bl	8000ed8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d302      	bcc.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d136      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10c      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e00b      	b.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e021      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10c      	bne.n	8002c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e00b      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f47f af6d 	bne.w	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca4:	e034      	b.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f8e3 	bl	8002e72 <I2C_IsAcknowledgeFailed>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e034      	b.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d028      	beq.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7fe f90b 	bl	8000ed8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11d      	bne.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d016      	beq.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e007      	b.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b80      	cmp	r3, #128	; 0x80
 8002d1c:	d1c3      	bne.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d34:	e034      	b.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f89b 	bl	8002e72 <I2C_IsAcknowledgeFailed>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e034      	b.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d028      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe f8c3 	bl	8000ed8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11d      	bne.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d016      	beq.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e007      	b.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d1c3      	bne.n	8002d36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dc4:	e049      	b.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d119      	bne.n	8002e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0210 	mvn.w	r2, #16
 8002ddc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e030      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe f866 	bl	8000ed8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d016      	beq.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d1ae      	bne.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d11b      	bne.n	8002ec2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e267      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d075      	beq.n	8002fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d157      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e242      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x74>
 8002f36:	4b76      	ldr	r3, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a75      	ldr	r2, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6f      	ldr	r2, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6c      	ldr	r2, [pc, #432]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f68:	4b69      	ldr	r3, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a68      	ldr	r2, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a65      	ldr	r2, [pc, #404]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fd ffa6 	bl	8000ed8 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fd ffa2 	bl	8000ed8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e207      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xc0>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fd ff92 	bl	8000ed8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fd ff8e 	bl	8000ed8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1f3      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b51      	ldr	r3, [pc, #324]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xe8>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1c7      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fd ff47 	bl	8000ed8 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304e:	f7fd ff43 	bl	8000ed8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1a8      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4925      	ldr	r1, [pc, #148]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd ff26 	bl	8000ed8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fd ff22 	bl	8000ed8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e187      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fd ff06 	bl	8000ed8 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fd ff02 	bl	8000ed8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e167      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x200>
 80030ee:	e01b      	b.n	8003128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fd feef 	bl	8000ed8 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	e00e      	b.n	800311c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fd feeb 	bl	8000ed8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d907      	bls.n	800311c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e150      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	42470000 	.word	0x42470000
 8003118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ea      	bne.n	80030fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8097 	beq.w	8003264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b81      	ldr	r3, [pc, #516]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b7d      	ldr	r3, [pc, #500]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b77      	ldr	r3, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b74      	ldr	r3, [pc, #464]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a73      	ldr	r2, [pc, #460]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fd feab 	bl	8000ed8 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fd fea7 	bl	8000ed8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e10c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x2ea>
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a63      	ldr	r2, [pc, #396]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x30c>
 80031c2:	4b5f      	ldr	r3, [pc, #380]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b5c      	ldr	r3, [pc, #368]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a5b      	ldr	r2, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031dc:	4b58      	ldr	r3, [pc, #352]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a57      	ldr	r2, [pc, #348]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	4b55      	ldr	r3, [pc, #340]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a54      	ldr	r2, [pc, #336]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 0304 	bic.w	r3, r3, #4
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fd fe6c 	bl	8000ed8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fd fe68 	bl	8000ed8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0cb      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ee      	beq.n	8003204 <HAL_RCC_OscConfig+0x334>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fd fe56 	bl	8000ed8 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fd fe52 	bl	8000ed8 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0b5      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003246:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ee      	bne.n	8003230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a1 	beq.w	80033b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d05c      	beq.n	8003334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d141      	bne.n	8003306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fe26 	bl	8000ed8 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd fe22 	bl	8000ed8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e087      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	491b      	ldr	r1, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fd fdfb 	bl	8000ed8 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fd fdf7 	bl	8000ed8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e05c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x416>
 8003304:	e054      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fd fde4 	bl	8000ed8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd fde0 	bl	8000ed8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e045      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x444>
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e038      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d028      	beq.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d121      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d11a      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d111      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fd fd12 	bl	8000ed8 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fd fd0e 	bl	8000ed8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5ccb      	ldrb	r3, [r1, r3]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fc72 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	080056d8 	.word	0x080056d8
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003590:	b090      	sub	sp, #64	; 0x40
 8003592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
 8003598:	2300      	movs	r3, #0
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359c:	2300      	movs	r3, #0
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a4:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_GetSysClockFreq+0x180>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d00d      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x40>
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	f200 80a1 	bhi.w	80036f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035be:	e09b      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_GetSysClockFreq+0x184>)
 80035c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80035c4:	e09b      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c6:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_RCC_GetSysClockFreq+0x188>)
 80035c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035ca:	e098      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035cc:	4b4f      	ldr	r3, [pc, #316]	; (800370c <HAL_RCC_GetSysClockFreq+0x180>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d6:	4b4d      	ldr	r3, [pc, #308]	; (800370c <HAL_RCC_GetSysClockFreq+0x180>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d028      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_RCC_GetSysClockFreq+0x180>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	2200      	movs	r2, #0
 80035ea:	623b      	str	r3, [r7, #32]
 80035ec:	627a      	str	r2, [r7, #36]	; 0x24
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035f4:	2100      	movs	r1, #0
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_GetSysClockFreq+0x188>)
 80035f8:	fb03 f201 	mul.w	r2, r3, r1
 80035fc:	2300      	movs	r3, #0
 80035fe:	fb00 f303 	mul.w	r3, r0, r3
 8003602:	4413      	add	r3, r2
 8003604:	4a43      	ldr	r2, [pc, #268]	; (8003714 <HAL_RCC_GetSysClockFreq+0x188>)
 8003606:	fba0 1202 	umull	r1, r2, r0, r2
 800360a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800360c:	460a      	mov	r2, r1
 800360e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003612:	4413      	add	r3, r2
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	2200      	movs	r2, #0
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	61fa      	str	r2, [r7, #28]
 800361e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003626:	f7fc fe2b 	bl	8000280 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4613      	mov	r3, r2
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	e053      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003634:	4b35      	ldr	r3, [pc, #212]	; (800370c <HAL_RCC_GetSysClockFreq+0x180>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	2200      	movs	r2, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	617a      	str	r2, [r7, #20]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003646:	f04f 0b00 	mov.w	fp, #0
 800364a:	4652      	mov	r2, sl
 800364c:	465b      	mov	r3, fp
 800364e:	f04f 0000 	mov.w	r0, #0
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	0159      	lsls	r1, r3, #5
 8003658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800365c:	0150      	lsls	r0, r2, #5
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	ebb2 080a 	subs.w	r8, r2, sl
 8003666:	eb63 090b 	sbc.w	r9, r3, fp
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003676:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800367a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800367e:	ebb2 0408 	subs.w	r4, r2, r8
 8003682:	eb63 0509 	sbc.w	r5, r3, r9
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	00eb      	lsls	r3, r5, #3
 8003690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003694:	00e2      	lsls	r2, r4, #3
 8003696:	4614      	mov	r4, r2
 8003698:	461d      	mov	r5, r3
 800369a:	eb14 030a 	adds.w	r3, r4, sl
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	eb45 030b 	adc.w	r3, r5, fp
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036b2:	4629      	mov	r1, r5
 80036b4:	028b      	lsls	r3, r1, #10
 80036b6:	4621      	mov	r1, r4
 80036b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036bc:	4621      	mov	r1, r4
 80036be:	028a      	lsls	r2, r1, #10
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c6:	2200      	movs	r2, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	60fa      	str	r2, [r7, #12]
 80036cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036d0:	f7fc fdd6 	bl	8000280 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_GetSysClockFreq+0x180>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036f6:	e002      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCC_GetSysClockFreq+0x184>)
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003700:	4618      	mov	r0, r3
 8003702:	3740      	adds	r7, #64	; 0x40
 8003704:	46bd      	mov	sp, r7
 8003706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800
 8003710:	00f42400 	.word	0x00f42400
 8003714:	017d7840 	.word	0x017d7840

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_GetHCLKFreq+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000000 	.word	0x20000000

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003734:	f7ff fff0 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0a9b      	lsrs	r3, r3, #10
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4903      	ldr	r1, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	080056e8 	.word	0x080056e8

08003758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800375c:	f7ff ffdc 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	0b5b      	lsrs	r3, r3, #13
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4903      	ldr	r1, [pc, #12]	; (800377c <HAL_RCC_GetPCLK2Freq+0x24>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40023800 	.word	0x40023800
 800377c:	080056e8 	.word	0x080056e8

08003780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e042      	b.n	8003818 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd f98a 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fdbd 	bl	8004344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b20      	cmp	r3, #32
 800383e:	d175      	bne.n	800392c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_UART_Transmit+0x2c>
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e06e      	b.n	800392e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2221      	movs	r2, #33	; 0x21
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800385e:	f7fd fb3b 	bl	8000ed8 <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	88fa      	ldrh	r2, [r7, #6]
 800386e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003878:	d108      	bne.n	800388c <HAL_UART_Transmit+0x6c>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e003      	b.n	8003894 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003894:	e02e      	b.n	80038f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fb1f 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e03a      	b.n	800392e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	3302      	adds	r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	e007      	b.n	80038e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	3301      	adds	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1cb      	bne.n	8003896 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	2140      	movs	r1, #64	; 0x40
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 faeb 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e006      	b.n	800392e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	4613      	mov	r3, r2
 8003942:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b20      	cmp	r3, #32
 800394e:	d112      	bne.n	8003976 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_UART_Receive_IT+0x26>
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e00b      	b.n	8003978 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	461a      	mov	r2, r3
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fb12 	bl	8003f96 <UART_Start_Receive_IT>
 8003972:	4603      	mov	r3, r0
 8003974:	e000      	b.n	8003978 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b0ba      	sub	sp, #232	; 0xe8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_UART_IRQHandler+0x66>
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fbf2 	bl	80041c8 <UART_Receive_IT>
      return;
 80039e4:	e25b      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80de 	beq.w	8003bac <HAL_UART_IRQHandler+0x22c>
 80039f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80d1 	beq.w	8003bac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_UART_IRQHandler+0xae>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_UART_IRQHandler+0xd2>
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f043 0202 	orr.w	r2, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_UART_IRQHandler+0xf6>
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f043 0204 	orr.w	r2, r3, #4
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d011      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x126>
 8003a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f043 0208 	orr.w	r2, r3, #8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 81f2 	beq.w	8003e94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_UART_IRQHandler+0x14e>
 8003abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fb7d 	bl	80041c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <HAL_UART_IRQHandler+0x17a>
 8003af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d04f      	beq.n	8003b9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa85 	bl	800400a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d141      	bne.n	8003b92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3314      	adds	r3, #20
 8003b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1d9      	bne.n	8003b0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d013      	beq.n	8003b8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	4a7e      	ldr	r2, [pc, #504]	; (8003d60 <HAL_UART_IRQHandler+0x3e0>)
 8003b68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fb63 	bl	800123a <HAL_DMA_Abort_IT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b84:	4610      	mov	r0, r2
 8003b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	e00e      	b.n	8003ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f994 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b90:	e00a      	b.n	8003ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f990 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	e006      	b.n	8003ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f98c 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003ba6:	e175      	b.n	8003e94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	bf00      	nop
    return;
 8003baa:	e173      	b.n	8003e94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	f040 814f 	bne.w	8003e54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8148 	beq.w	8003e54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8141 	beq.w	8003e54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	f040 80b6 	bne.w	8003d64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8145 	beq.w	8003e98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f080 813e 	bcs.w	8003e98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2e:	f000 8088 	beq.w	8003d42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3314      	adds	r3, #20
 8003c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e1      	bne.n	8003c7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3314      	adds	r3, #20
 8003cc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e3      	bne.n	8003cba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d12:	f023 0310 	bic.w	r3, r3, #16
 8003d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d24:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e3      	bne.n	8003d00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd fa0c 	bl	800115a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f8b7 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d5e:	e09b      	b.n	8003e98 <HAL_UART_IRQHandler+0x518>
 8003d60:	080040d1 	.word	0x080040d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 808e 	beq.w	8003e9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8089 	beq.w	8003e9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dae:	647a      	str	r2, [r7, #68]	; 0x44
 8003db0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003db4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003de6:	633a      	str	r2, [r7, #48]	; 0x30
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e3      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e2c:	61fa      	str	r2, [r7, #28]
 8003e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e3      	bne.n	8003e08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f83d 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e52:	e023      	b.n	8003e9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_UART_IRQHandler+0x4f4>
 8003e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f943 	bl	80040f8 <UART_Transmit_IT>
    return;
 8003e72:	e014      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <HAL_UART_IRQHandler+0x51e>
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f983 	bl	8004198 <UART_EndTransmit_IT>
    return;
 8003e92:	e004      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e94:	bf00      	nop
 8003e96:	e002      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e9c:	bf00      	nop
  }
}
 8003e9e:	37e8      	adds	r7, #232	; 0xe8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	e03b      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d037      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7fc ffeb 	bl	8000ed8 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e03a      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b80      	cmp	r3, #128	; 0x80
 8003f2a:	d020      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d01d      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d116      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f857 	bl	800400a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e00f      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d0b4      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2222      	movs	r2, #34	; 0x22
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fda:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0220 	orr.w	r2, r2, #32
 8003ffa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400a:	b480      	push	{r7}
 800400c:	b095      	sub	sp, #84	; 0x54
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004032:	643a      	str	r2, [r7, #64]	; 0x40
 8004034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	61fb      	str	r3, [r7, #28]
   return(result);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	64bb      	str	r3, [r7, #72]	; 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	2b01      	cmp	r3, #1
 8004080:	d119      	bne.n	80040b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	60bb      	str	r3, [r7, #8]
   return(result);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f023 0310 	bic.w	r3, r3, #16
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040a2:	61ba      	str	r2, [r7, #24]
 80040a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	613b      	str	r3, [r7, #16]
   return(result);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e5      	bne.n	8004082 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040c4:	bf00      	nop
 80040c6:	3754      	adds	r7, #84	; 0x54
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fee4 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b21      	cmp	r3, #33	; 0x21
 800410a:	d13e      	bne.n	800418a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004114:	d114      	bne.n	8004140 <UART_Transmit_IT+0x48>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004132:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	621a      	str	r2, [r3, #32]
 800413e:	e008      	b.n	8004152 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	1c59      	adds	r1, r3, #1
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6211      	str	r1, [r2, #32]
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29b      	uxth	r3, r3
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4619      	mov	r1, r3
 8004160:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004174:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004184:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fe73 	bl	8003ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b22      	cmp	r3, #34	; 0x22
 80041da:	f040 80ae 	bne.w	800433a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d117      	bne.n	8004218 <UART_Receive_IT+0x50>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d113      	bne.n	8004218 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	b29a      	uxth	r2, r3
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	629a      	str	r2, [r3, #40]	; 0x28
 8004216:	e026      	b.n	8004266 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d007      	beq.n	800423c <UART_Receive_IT+0x74>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <UART_Receive_IT+0x82>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e008      	b.n	800425c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004256:	b2da      	uxtb	r2, r3
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4619      	mov	r1, r3
 8004274:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004276:	2b00      	cmp	r3, #0
 8004278:	d15d      	bne.n	8004336 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0220 	bic.w	r2, r2, #32
 8004288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004298:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d135      	bne.n	800432c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	613b      	str	r3, [r7, #16]
   return(result);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f023 0310 	bic.w	r3, r3, #16
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	623a      	str	r2, [r7, #32]
 80042e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	69f9      	ldr	r1, [r7, #28]
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b10      	cmp	r3, #16
 8004306:	d10a      	bne.n	800431e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff fdd1 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
 800432a:	e002      	b.n	8004332 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fc fcfb 	bl	8000d28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e002      	b.n	800433c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3730      	adds	r7, #48	; 0x30
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b0c0      	sub	sp, #256	; 0x100
 800434a:	af00      	add	r7, sp, #0
 800434c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	68d9      	ldr	r1, [r3, #12]
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	ea40 0301 	orr.w	r3, r0, r1
 800436c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	431a      	orrs	r2, r3
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	431a      	orrs	r2, r3
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800439c:	f021 010c 	bic.w	r1, r1, #12
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043aa:	430b      	orrs	r3, r1
 80043ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043be:	6999      	ldr	r1, [r3, #24]
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	ea40 0301 	orr.w	r3, r0, r1
 80043ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b8f      	ldr	r3, [pc, #572]	; (8004610 <UART_SetConfig+0x2cc>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d005      	beq.n	80043e4 <UART_SetConfig+0xa0>
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b8d      	ldr	r3, [pc, #564]	; (8004614 <UART_SetConfig+0x2d0>)
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d104      	bne.n	80043ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7ff f9b8 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 80043e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043ec:	e003      	b.n	80043f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ee:	f7ff f99f 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 80043f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004400:	f040 810c 	bne.w	800461c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004408:	2200      	movs	r2, #0
 800440a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800440e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004416:	4622      	mov	r2, r4
 8004418:	462b      	mov	r3, r5
 800441a:	1891      	adds	r1, r2, r2
 800441c:	65b9      	str	r1, [r7, #88]	; 0x58
 800441e:	415b      	adcs	r3, r3
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004426:	4621      	mov	r1, r4
 8004428:	eb12 0801 	adds.w	r8, r2, r1
 800442c:	4629      	mov	r1, r5
 800442e:	eb43 0901 	adc.w	r9, r3, r1
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004446:	4690      	mov	r8, r2
 8004448:	4699      	mov	r9, r3
 800444a:	4623      	mov	r3, r4
 800444c:	eb18 0303 	adds.w	r3, r8, r3
 8004450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004454:	462b      	mov	r3, r5
 8004456:	eb49 0303 	adc.w	r3, r9, r3
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800446a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800446e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004472:	460b      	mov	r3, r1
 8004474:	18db      	adds	r3, r3, r3
 8004476:	653b      	str	r3, [r7, #80]	; 0x50
 8004478:	4613      	mov	r3, r2
 800447a:	eb42 0303 	adc.w	r3, r2, r3
 800447e:	657b      	str	r3, [r7, #84]	; 0x54
 8004480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004488:	f7fb fefa 	bl	8000280 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4b61      	ldr	r3, [pc, #388]	; (8004618 <UART_SetConfig+0x2d4>)
 8004492:	fba3 2302 	umull	r2, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	011c      	lsls	r4, r3, #4
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80044b4:	415b      	adcs	r3, r3
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044bc:	4641      	mov	r1, r8
 80044be:	eb12 0a01 	adds.w	sl, r2, r1
 80044c2:	4649      	mov	r1, r9
 80044c4:	eb43 0b01 	adc.w	fp, r3, r1
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044dc:	4692      	mov	sl, r2
 80044de:	469b      	mov	fp, r3
 80044e0:	4643      	mov	r3, r8
 80044e2:	eb1a 0303 	adds.w	r3, sl, r3
 80044e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ea:	464b      	mov	r3, r9
 80044ec:	eb4b 0303 	adc.w	r3, fp, r3
 80044f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004508:	460b      	mov	r3, r1
 800450a:	18db      	adds	r3, r3, r3
 800450c:	643b      	str	r3, [r7, #64]	; 0x40
 800450e:	4613      	mov	r3, r2
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	647b      	str	r3, [r7, #68]	; 0x44
 8004516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800451a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800451e:	f7fb feaf 	bl	8000280 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4611      	mov	r1, r2
 8004528:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <UART_SetConfig+0x2d4>)
 800452a:	fba3 2301 	umull	r2, r3, r3, r1
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2264      	movs	r2, #100	; 0x64
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	1acb      	subs	r3, r1, r3
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <UART_SetConfig+0x2d4>)
 8004540:	fba3 2302 	umull	r2, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800454c:	441c      	add	r4, r3
 800454e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800455c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	1891      	adds	r1, r2, r2
 8004566:	63b9      	str	r1, [r7, #56]	; 0x38
 8004568:	415b      	adcs	r3, r3
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004570:	4641      	mov	r1, r8
 8004572:	1851      	adds	r1, r2, r1
 8004574:	6339      	str	r1, [r7, #48]	; 0x30
 8004576:	4649      	mov	r1, r9
 8004578:	414b      	adcs	r3, r1
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004588:	4659      	mov	r1, fp
 800458a:	00cb      	lsls	r3, r1, #3
 800458c:	4651      	mov	r1, sl
 800458e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004592:	4651      	mov	r1, sl
 8004594:	00ca      	lsls	r2, r1, #3
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	4603      	mov	r3, r0
 800459c:	4642      	mov	r2, r8
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a4:	464b      	mov	r3, r9
 80045a6:	460a      	mov	r2, r1
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045c4:	460b      	mov	r3, r1
 80045c6:	18db      	adds	r3, r3, r3
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ca:	4613      	mov	r3, r2
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045da:	f7fb fe51 	bl	8000280 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <UART_SetConfig+0x2d4>)
 80045e4:	fba3 1302 	umull	r1, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	2164      	movs	r1, #100	; 0x64
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	3332      	adds	r3, #50	; 0x32
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <UART_SetConfig+0x2d4>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	f003 0207 	and.w	r2, r3, #7
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4422      	add	r2, r4
 800460a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800460c:	e106      	b.n	800481c <UART_SetConfig+0x4d8>
 800460e:	bf00      	nop
 8004610:	40011000 	.word	0x40011000
 8004614:	40011400 	.word	0x40011400
 8004618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800461c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004620:	2200      	movs	r2, #0
 8004622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004626:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800462a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800462e:	4642      	mov	r2, r8
 8004630:	464b      	mov	r3, r9
 8004632:	1891      	adds	r1, r2, r2
 8004634:	6239      	str	r1, [r7, #32]
 8004636:	415b      	adcs	r3, r3
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463e:	4641      	mov	r1, r8
 8004640:	1854      	adds	r4, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0501 	adc.w	r5, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	00eb      	lsls	r3, r5, #3
 8004652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004656:	00e2      	lsls	r2, r4, #3
 8004658:	4614      	mov	r4, r2
 800465a:	461d      	mov	r5, r3
 800465c:	4643      	mov	r3, r8
 800465e:	18e3      	adds	r3, r4, r3
 8004660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004664:	464b      	mov	r3, r9
 8004666:	eb45 0303 	adc.w	r3, r5, r3
 800466a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800467a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800468a:	4629      	mov	r1, r5
 800468c:	008b      	lsls	r3, r1, #2
 800468e:	4621      	mov	r1, r4
 8004690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004694:	4621      	mov	r1, r4
 8004696:	008a      	lsls	r2, r1, #2
 8004698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800469c:	f7fb fdf0 	bl	8000280 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4b60      	ldr	r3, [pc, #384]	; (8004828 <UART_SetConfig+0x4e4>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	011c      	lsls	r4, r3, #4
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	61b9      	str	r1, [r7, #24]
 80046c8:	415b      	adcs	r3, r3
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	4641      	mov	r1, r8
 80046d2:	1851      	adds	r1, r2, r1
 80046d4:	6139      	str	r1, [r7, #16]
 80046d6:	4649      	mov	r1, r9
 80046d8:	414b      	adcs	r3, r1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e8:	4659      	mov	r1, fp
 80046ea:	00cb      	lsls	r3, r1, #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f2:	4651      	mov	r1, sl
 80046f4:	00ca      	lsls	r2, r1, #3
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	4642      	mov	r2, r8
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004704:	464b      	mov	r3, r9
 8004706:	460a      	mov	r2, r1
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	67bb      	str	r3, [r7, #120]	; 0x78
 800471a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004728:	4649      	mov	r1, r9
 800472a:	008b      	lsls	r3, r1, #2
 800472c:	4641      	mov	r1, r8
 800472e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004732:	4641      	mov	r1, r8
 8004734:	008a      	lsls	r2, r1, #2
 8004736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800473a:	f7fb fda1 	bl	8000280 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4611      	mov	r1, r2
 8004744:	4b38      	ldr	r3, [pc, #224]	; (8004828 <UART_SetConfig+0x4e4>)
 8004746:	fba3 2301 	umull	r2, r3, r3, r1
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2264      	movs	r2, #100	; 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	3332      	adds	r3, #50	; 0x32
 8004758:	4a33      	ldr	r2, [pc, #204]	; (8004828 <UART_SetConfig+0x4e4>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004764:	441c      	add	r4, r3
 8004766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476a:	2200      	movs	r2, #0
 800476c:	673b      	str	r3, [r7, #112]	; 0x70
 800476e:	677a      	str	r2, [r7, #116]	; 0x74
 8004770:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	1891      	adds	r1, r2, r2
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	415b      	adcs	r3, r3
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004784:	4641      	mov	r1, r8
 8004786:	1851      	adds	r1, r2, r1
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	4649      	mov	r1, r9
 800478c:	414b      	adcs	r3, r1
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800479c:	4659      	mov	r1, fp
 800479e:	00cb      	lsls	r3, r1, #3
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a6:	4651      	mov	r1, sl
 80047a8:	00ca      	lsls	r2, r1, #3
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	4642      	mov	r2, r8
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b6:	464b      	mov	r3, r9
 80047b8:	460a      	mov	r2, r1
 80047ba:	eb42 0303 	adc.w	r3, r2, r3
 80047be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	663b      	str	r3, [r7, #96]	; 0x60
 80047ca:	667a      	str	r2, [r7, #100]	; 0x64
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047d8:	4649      	mov	r1, r9
 80047da:	008b      	lsls	r3, r1, #2
 80047dc:	4641      	mov	r1, r8
 80047de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e2:	4641      	mov	r1, r8
 80047e4:	008a      	lsls	r2, r1, #2
 80047e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047ea:	f7fb fd49 	bl	8000280 <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <UART_SetConfig+0x4e4>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	; 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a08      	ldr	r2, [pc, #32]	; (8004828 <UART_SetConfig+0x4e4>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4422      	add	r2, r4
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004822:	46bd      	mov	sp, r7
 8004824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <std>:
 800482c:	2300      	movs	r3, #0
 800482e:	b510      	push	{r4, lr}
 8004830:	4604      	mov	r4, r0
 8004832:	e9c0 3300 	strd	r3, r3, [r0]
 8004836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800483a:	6083      	str	r3, [r0, #8]
 800483c:	8181      	strh	r1, [r0, #12]
 800483e:	6643      	str	r3, [r0, #100]	; 0x64
 8004840:	81c2      	strh	r2, [r0, #14]
 8004842:	6183      	str	r3, [r0, #24]
 8004844:	4619      	mov	r1, r3
 8004846:	2208      	movs	r2, #8
 8004848:	305c      	adds	r0, #92	; 0x5c
 800484a:	f000 f906 	bl	8004a5a <memset>
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <std+0x58>)
 8004850:	6263      	str	r3, [r4, #36]	; 0x24
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <std+0x5c>)
 8004854:	62a3      	str	r3, [r4, #40]	; 0x28
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <std+0x60>)
 8004858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <std+0x64>)
 800485c:	6323      	str	r3, [r4, #48]	; 0x30
 800485e:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <std+0x68>)
 8004860:	6224      	str	r4, [r4, #32]
 8004862:	429c      	cmp	r4, r3
 8004864:	d006      	beq.n	8004874 <std+0x48>
 8004866:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800486a:	4294      	cmp	r4, r2
 800486c:	d002      	beq.n	8004874 <std+0x48>
 800486e:	33d0      	adds	r3, #208	; 0xd0
 8004870:	429c      	cmp	r4, r3
 8004872:	d105      	bne.n	8004880 <std+0x54>
 8004874:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800487c:	f000 b966 	b.w	8004b4c <__retarget_lock_init_recursive>
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	080049d5 	.word	0x080049d5
 8004888:	080049f7 	.word	0x080049f7
 800488c:	08004a2f 	.word	0x08004a2f
 8004890:	08004a53 	.word	0x08004a53
 8004894:	20000230 	.word	0x20000230

08004898 <stdio_exit_handler>:
 8004898:	4a02      	ldr	r2, [pc, #8]	; (80048a4 <stdio_exit_handler+0xc>)
 800489a:	4903      	ldr	r1, [pc, #12]	; (80048a8 <stdio_exit_handler+0x10>)
 800489c:	4803      	ldr	r0, [pc, #12]	; (80048ac <stdio_exit_handler+0x14>)
 800489e:	f000 b869 	b.w	8004974 <_fwalk_sglue>
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c
 80048a8:	080053f9 	.word	0x080053f9
 80048ac:	20000018 	.word	0x20000018

080048b0 <cleanup_stdio>:
 80048b0:	6841      	ldr	r1, [r0, #4]
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <cleanup_stdio+0x34>)
 80048b4:	4299      	cmp	r1, r3
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	d001      	beq.n	80048c0 <cleanup_stdio+0x10>
 80048bc:	f000 fd9c 	bl	80053f8 <_fflush_r>
 80048c0:	68a1      	ldr	r1, [r4, #8]
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <cleanup_stdio+0x38>)
 80048c4:	4299      	cmp	r1, r3
 80048c6:	d002      	beq.n	80048ce <cleanup_stdio+0x1e>
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 fd95 	bl	80053f8 <_fflush_r>
 80048ce:	68e1      	ldr	r1, [r4, #12]
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <cleanup_stdio+0x3c>)
 80048d2:	4299      	cmp	r1, r3
 80048d4:	d004      	beq.n	80048e0 <cleanup_stdio+0x30>
 80048d6:	4620      	mov	r0, r4
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048dc:	f000 bd8c 	b.w	80053f8 <_fflush_r>
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	bf00      	nop
 80048e4:	20000230 	.word	0x20000230
 80048e8:	20000298 	.word	0x20000298
 80048ec:	20000300 	.word	0x20000300

080048f0 <global_stdio_init.part.0>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <global_stdio_init.part.0+0x30>)
 80048f4:	4c0b      	ldr	r4, [pc, #44]	; (8004924 <global_stdio_init.part.0+0x34>)
 80048f6:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <global_stdio_init.part.0+0x38>)
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	4620      	mov	r0, r4
 80048fc:	2200      	movs	r2, #0
 80048fe:	2104      	movs	r1, #4
 8004900:	f7ff ff94 	bl	800482c <std>
 8004904:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004908:	2201      	movs	r2, #1
 800490a:	2109      	movs	r1, #9
 800490c:	f7ff ff8e 	bl	800482c <std>
 8004910:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004914:	2202      	movs	r2, #2
 8004916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800491a:	2112      	movs	r1, #18
 800491c:	f7ff bf86 	b.w	800482c <std>
 8004920:	20000368 	.word	0x20000368
 8004924:	20000230 	.word	0x20000230
 8004928:	08004899 	.word	0x08004899

0800492c <__sfp_lock_acquire>:
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <__sfp_lock_acquire+0x8>)
 800492e:	f000 b90e 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 8004932:	bf00      	nop
 8004934:	20000371 	.word	0x20000371

08004938 <__sfp_lock_release>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__sfp_lock_release+0x8>)
 800493a:	f000 b909 	b.w	8004b50 <__retarget_lock_release_recursive>
 800493e:	bf00      	nop
 8004940:	20000371 	.word	0x20000371

08004944 <__sinit>:
 8004944:	b510      	push	{r4, lr}
 8004946:	4604      	mov	r4, r0
 8004948:	f7ff fff0 	bl	800492c <__sfp_lock_acquire>
 800494c:	6a23      	ldr	r3, [r4, #32]
 800494e:	b11b      	cbz	r3, 8004958 <__sinit+0x14>
 8004950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004954:	f7ff bff0 	b.w	8004938 <__sfp_lock_release>
 8004958:	4b04      	ldr	r3, [pc, #16]	; (800496c <__sinit+0x28>)
 800495a:	6223      	str	r3, [r4, #32]
 800495c:	4b04      	ldr	r3, [pc, #16]	; (8004970 <__sinit+0x2c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f5      	bne.n	8004950 <__sinit+0xc>
 8004964:	f7ff ffc4 	bl	80048f0 <global_stdio_init.part.0>
 8004968:	e7f2      	b.n	8004950 <__sinit+0xc>
 800496a:	bf00      	nop
 800496c:	080048b1 	.word	0x080048b1
 8004970:	20000368 	.word	0x20000368

08004974 <_fwalk_sglue>:
 8004974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004978:	4607      	mov	r7, r0
 800497a:	4688      	mov	r8, r1
 800497c:	4614      	mov	r4, r2
 800497e:	2600      	movs	r6, #0
 8004980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004984:	f1b9 0901 	subs.w	r9, r9, #1
 8004988:	d505      	bpl.n	8004996 <_fwalk_sglue+0x22>
 800498a:	6824      	ldr	r4, [r4, #0]
 800498c:	2c00      	cmp	r4, #0
 800498e:	d1f7      	bne.n	8004980 <_fwalk_sglue+0xc>
 8004990:	4630      	mov	r0, r6
 8004992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004996:	89ab      	ldrh	r3, [r5, #12]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d907      	bls.n	80049ac <_fwalk_sglue+0x38>
 800499c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049a0:	3301      	adds	r3, #1
 80049a2:	d003      	beq.n	80049ac <_fwalk_sglue+0x38>
 80049a4:	4629      	mov	r1, r5
 80049a6:	4638      	mov	r0, r7
 80049a8:	47c0      	blx	r8
 80049aa:	4306      	orrs	r6, r0
 80049ac:	3568      	adds	r5, #104	; 0x68
 80049ae:	e7e9      	b.n	8004984 <_fwalk_sglue+0x10>

080049b0 <iprintf>:
 80049b0:	b40f      	push	{r0, r1, r2, r3}
 80049b2:	b507      	push	{r0, r1, r2, lr}
 80049b4:	4906      	ldr	r1, [pc, #24]	; (80049d0 <iprintf+0x20>)
 80049b6:	ab04      	add	r3, sp, #16
 80049b8:	6808      	ldr	r0, [r1, #0]
 80049ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80049be:	6881      	ldr	r1, [r0, #8]
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	f000 f9e9 	bl	8004d98 <_vfiprintf_r>
 80049c6:	b003      	add	sp, #12
 80049c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049cc:	b004      	add	sp, #16
 80049ce:	4770      	bx	lr
 80049d0:	20000064 	.word	0x20000064

080049d4 <__sread>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	460c      	mov	r4, r1
 80049d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049dc:	f000 f868 	bl	8004ab0 <_read_r>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	bfab      	itete	ge
 80049e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049e6:	89a3      	ldrhlt	r3, [r4, #12]
 80049e8:	181b      	addge	r3, r3, r0
 80049ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049ee:	bfac      	ite	ge
 80049f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80049f2:	81a3      	strhlt	r3, [r4, #12]
 80049f4:	bd10      	pop	{r4, pc}

080049f6 <__swrite>:
 80049f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fa:	461f      	mov	r7, r3
 80049fc:	898b      	ldrh	r3, [r1, #12]
 80049fe:	05db      	lsls	r3, r3, #23
 8004a00:	4605      	mov	r5, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	4616      	mov	r6, r2
 8004a06:	d505      	bpl.n	8004a14 <__swrite+0x1e>
 8004a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f000 f83c 	bl	8004a8c <_lseek_r>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	4632      	mov	r2, r6
 8004a22:	463b      	mov	r3, r7
 8004a24:	4628      	mov	r0, r5
 8004a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2a:	f000 b853 	b.w	8004ad4 <_write_r>

08004a2e <__sseek>:
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	460c      	mov	r4, r1
 8004a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a36:	f000 f829 	bl	8004a8c <_lseek_r>
 8004a3a:	1c43      	adds	r3, r0, #1
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	bf15      	itete	ne
 8004a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a4a:	81a3      	strheq	r3, [r4, #12]
 8004a4c:	bf18      	it	ne
 8004a4e:	81a3      	strhne	r3, [r4, #12]
 8004a50:	bd10      	pop	{r4, pc}

08004a52 <__sclose>:
 8004a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a56:	f000 b809 	b.w	8004a6c <_close_r>

08004a5a <memset>:
 8004a5a:	4402      	add	r2, r0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d100      	bne.n	8004a64 <memset+0xa>
 8004a62:	4770      	bx	lr
 8004a64:	f803 1b01 	strb.w	r1, [r3], #1
 8004a68:	e7f9      	b.n	8004a5e <memset+0x4>
	...

08004a6c <_close_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d06      	ldr	r5, [pc, #24]	; (8004a88 <_close_r+0x1c>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	602b      	str	r3, [r5, #0]
 8004a78:	f7fc f8c3 	bl	8000c02 <_close>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_close_r+0x1a>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_close_r+0x1a>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	2000036c 	.word	0x2000036c

08004a8c <_lseek_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4d07      	ldr	r5, [pc, #28]	; (8004aac <_lseek_r+0x20>)
 8004a90:	4604      	mov	r4, r0
 8004a92:	4608      	mov	r0, r1
 8004a94:	4611      	mov	r1, r2
 8004a96:	2200      	movs	r2, #0
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f7fc f8d8 	bl	8000c50 <_lseek>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d102      	bne.n	8004aaa <_lseek_r+0x1e>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b103      	cbz	r3, 8004aaa <_lseek_r+0x1e>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	2000036c 	.word	0x2000036c

08004ab0 <_read_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4d07      	ldr	r5, [pc, #28]	; (8004ad0 <_read_r+0x20>)
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	4611      	mov	r1, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	602a      	str	r2, [r5, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7fc f882 	bl	8000bc8 <_read>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_read_r+0x1e>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_read_r+0x1e>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	2000036c 	.word	0x2000036c

08004ad4 <_write_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d07      	ldr	r5, [pc, #28]	; (8004af4 <_write_r+0x20>)
 8004ad8:	4604      	mov	r4, r0
 8004ada:	4608      	mov	r0, r1
 8004adc:	4611      	mov	r1, r2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	602a      	str	r2, [r5, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7fc f952 	bl	8000d8c <_write>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_write_r+0x1e>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_write_r+0x1e>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	2000036c 	.word	0x2000036c

08004af8 <__errno>:
 8004af8:	4b01      	ldr	r3, [pc, #4]	; (8004b00 <__errno+0x8>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000064 	.word	0x20000064

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4d0d      	ldr	r5, [pc, #52]	; (8004b3c <__libc_init_array+0x38>)
 8004b08:	4c0d      	ldr	r4, [pc, #52]	; (8004b40 <__libc_init_array+0x3c>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	4d0b      	ldr	r5, [pc, #44]	; (8004b44 <__libc_init_array+0x40>)
 8004b16:	4c0c      	ldr	r4, [pc, #48]	; (8004b48 <__libc_init_array+0x44>)
 8004b18:	f000 fdc0 	bl	800569c <_init>
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	2600      	movs	r6, #0
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	0800572c 	.word	0x0800572c
 8004b40:	0800572c 	.word	0x0800572c
 8004b44:	0800572c 	.word	0x0800572c
 8004b48:	08005730 	.word	0x08005730

08004b4c <__retarget_lock_init_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_acquire_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <__retarget_lock_release_recursive>:
 8004b50:	4770      	bx	lr
	...

08004b54 <_free_r>:
 8004b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b56:	2900      	cmp	r1, #0
 8004b58:	d044      	beq.n	8004be4 <_free_r+0x90>
 8004b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b5e:	9001      	str	r0, [sp, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f1a1 0404 	sub.w	r4, r1, #4
 8004b66:	bfb8      	it	lt
 8004b68:	18e4      	addlt	r4, r4, r3
 8004b6a:	f000 f8df 	bl	8004d2c <__malloc_lock>
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <_free_r+0x94>)
 8004b70:	9801      	ldr	r0, [sp, #4]
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	b933      	cbnz	r3, 8004b84 <_free_r+0x30>
 8004b76:	6063      	str	r3, [r4, #4]
 8004b78:	6014      	str	r4, [r2, #0]
 8004b7a:	b003      	add	sp, #12
 8004b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b80:	f000 b8da 	b.w	8004d38 <__malloc_unlock>
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	d908      	bls.n	8004b9a <_free_r+0x46>
 8004b88:	6825      	ldr	r5, [r4, #0]
 8004b8a:	1961      	adds	r1, r4, r5
 8004b8c:	428b      	cmp	r3, r1
 8004b8e:	bf01      	itttt	eq
 8004b90:	6819      	ldreq	r1, [r3, #0]
 8004b92:	685b      	ldreq	r3, [r3, #4]
 8004b94:	1949      	addeq	r1, r1, r5
 8004b96:	6021      	streq	r1, [r4, #0]
 8004b98:	e7ed      	b.n	8004b76 <_free_r+0x22>
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b10b      	cbz	r3, 8004ba4 <_free_r+0x50>
 8004ba0:	42a3      	cmp	r3, r4
 8004ba2:	d9fa      	bls.n	8004b9a <_free_r+0x46>
 8004ba4:	6811      	ldr	r1, [r2, #0]
 8004ba6:	1855      	adds	r5, r2, r1
 8004ba8:	42a5      	cmp	r5, r4
 8004baa:	d10b      	bne.n	8004bc4 <_free_r+0x70>
 8004bac:	6824      	ldr	r4, [r4, #0]
 8004bae:	4421      	add	r1, r4
 8004bb0:	1854      	adds	r4, r2, r1
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	6011      	str	r1, [r2, #0]
 8004bb6:	d1e0      	bne.n	8004b7a <_free_r+0x26>
 8004bb8:	681c      	ldr	r4, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	6053      	str	r3, [r2, #4]
 8004bbe:	440c      	add	r4, r1
 8004bc0:	6014      	str	r4, [r2, #0]
 8004bc2:	e7da      	b.n	8004b7a <_free_r+0x26>
 8004bc4:	d902      	bls.n	8004bcc <_free_r+0x78>
 8004bc6:	230c      	movs	r3, #12
 8004bc8:	6003      	str	r3, [r0, #0]
 8004bca:	e7d6      	b.n	8004b7a <_free_r+0x26>
 8004bcc:	6825      	ldr	r5, [r4, #0]
 8004bce:	1961      	adds	r1, r4, r5
 8004bd0:	428b      	cmp	r3, r1
 8004bd2:	bf04      	itt	eq
 8004bd4:	6819      	ldreq	r1, [r3, #0]
 8004bd6:	685b      	ldreq	r3, [r3, #4]
 8004bd8:	6063      	str	r3, [r4, #4]
 8004bda:	bf04      	itt	eq
 8004bdc:	1949      	addeq	r1, r1, r5
 8004bde:	6021      	streq	r1, [r4, #0]
 8004be0:	6054      	str	r4, [r2, #4]
 8004be2:	e7ca      	b.n	8004b7a <_free_r+0x26>
 8004be4:	b003      	add	sp, #12
 8004be6:	bd30      	pop	{r4, r5, pc}
 8004be8:	20000374 	.word	0x20000374

08004bec <sbrk_aligned>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4e0e      	ldr	r6, [pc, #56]	; (8004c28 <sbrk_aligned+0x3c>)
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	6831      	ldr	r1, [r6, #0]
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	b911      	cbnz	r1, 8004bfe <sbrk_aligned+0x12>
 8004bf8:	f000 fcbc 	bl	8005574 <_sbrk_r>
 8004bfc:	6030      	str	r0, [r6, #0]
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 fcb7 	bl	8005574 <_sbrk_r>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	d00a      	beq.n	8004c20 <sbrk_aligned+0x34>
 8004c0a:	1cc4      	adds	r4, r0, #3
 8004c0c:	f024 0403 	bic.w	r4, r4, #3
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d007      	beq.n	8004c24 <sbrk_aligned+0x38>
 8004c14:	1a21      	subs	r1, r4, r0
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 fcac 	bl	8005574 <_sbrk_r>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d101      	bne.n	8004c24 <sbrk_aligned+0x38>
 8004c20:	f04f 34ff 	mov.w	r4, #4294967295
 8004c24:	4620      	mov	r0, r4
 8004c26:	bd70      	pop	{r4, r5, r6, pc}
 8004c28:	20000378 	.word	0x20000378

08004c2c <_malloc_r>:
 8004c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c30:	1ccd      	adds	r5, r1, #3
 8004c32:	f025 0503 	bic.w	r5, r5, #3
 8004c36:	3508      	adds	r5, #8
 8004c38:	2d0c      	cmp	r5, #12
 8004c3a:	bf38      	it	cc
 8004c3c:	250c      	movcc	r5, #12
 8004c3e:	2d00      	cmp	r5, #0
 8004c40:	4607      	mov	r7, r0
 8004c42:	db01      	blt.n	8004c48 <_malloc_r+0x1c>
 8004c44:	42a9      	cmp	r1, r5
 8004c46:	d905      	bls.n	8004c54 <_malloc_r+0x28>
 8004c48:	230c      	movs	r3, #12
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	4630      	mov	r0, r6
 8004c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d28 <_malloc_r+0xfc>
 8004c58:	f000 f868 	bl	8004d2c <__malloc_lock>
 8004c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c60:	461c      	mov	r4, r3
 8004c62:	bb5c      	cbnz	r4, 8004cbc <_malloc_r+0x90>
 8004c64:	4629      	mov	r1, r5
 8004c66:	4638      	mov	r0, r7
 8004c68:	f7ff ffc0 	bl	8004bec <sbrk_aligned>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	4604      	mov	r4, r0
 8004c70:	d155      	bne.n	8004d1e <_malloc_r+0xf2>
 8004c72:	f8d8 4000 	ldr.w	r4, [r8]
 8004c76:	4626      	mov	r6, r4
 8004c78:	2e00      	cmp	r6, #0
 8004c7a:	d145      	bne.n	8004d08 <_malloc_r+0xdc>
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d048      	beq.n	8004d12 <_malloc_r+0xe6>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	4631      	mov	r1, r6
 8004c84:	4638      	mov	r0, r7
 8004c86:	eb04 0903 	add.w	r9, r4, r3
 8004c8a:	f000 fc73 	bl	8005574 <_sbrk_r>
 8004c8e:	4581      	cmp	r9, r0
 8004c90:	d13f      	bne.n	8004d12 <_malloc_r+0xe6>
 8004c92:	6821      	ldr	r1, [r4, #0]
 8004c94:	1a6d      	subs	r5, r5, r1
 8004c96:	4629      	mov	r1, r5
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff ffa7 	bl	8004bec <sbrk_aligned>
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d037      	beq.n	8004d12 <_malloc_r+0xe6>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	442b      	add	r3, r5
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d038      	beq.n	8004d22 <_malloc_r+0xf6>
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	42a2      	cmp	r2, r4
 8004cb4:	d12b      	bne.n	8004d0e <_malloc_r+0xe2>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	e00f      	b.n	8004cdc <_malloc_r+0xb0>
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	1b52      	subs	r2, r2, r5
 8004cc0:	d41f      	bmi.n	8004d02 <_malloc_r+0xd6>
 8004cc2:	2a0b      	cmp	r2, #11
 8004cc4:	d917      	bls.n	8004cf6 <_malloc_r+0xca>
 8004cc6:	1961      	adds	r1, r4, r5
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	6025      	str	r5, [r4, #0]
 8004ccc:	bf18      	it	ne
 8004cce:	6059      	strne	r1, [r3, #4]
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	bf08      	it	eq
 8004cd4:	f8c8 1000 	streq.w	r1, [r8]
 8004cd8:	5162      	str	r2, [r4, r5]
 8004cda:	604b      	str	r3, [r1, #4]
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f104 060b 	add.w	r6, r4, #11
 8004ce2:	f000 f829 	bl	8004d38 <__malloc_unlock>
 8004ce6:	f026 0607 	bic.w	r6, r6, #7
 8004cea:	1d23      	adds	r3, r4, #4
 8004cec:	1af2      	subs	r2, r6, r3
 8004cee:	d0ae      	beq.n	8004c4e <_malloc_r+0x22>
 8004cf0:	1b9b      	subs	r3, r3, r6
 8004cf2:	50a3      	str	r3, [r4, r2]
 8004cf4:	e7ab      	b.n	8004c4e <_malloc_r+0x22>
 8004cf6:	42a3      	cmp	r3, r4
 8004cf8:	6862      	ldr	r2, [r4, #4]
 8004cfa:	d1dd      	bne.n	8004cb8 <_malloc_r+0x8c>
 8004cfc:	f8c8 2000 	str.w	r2, [r8]
 8004d00:	e7ec      	b.n	8004cdc <_malloc_r+0xb0>
 8004d02:	4623      	mov	r3, r4
 8004d04:	6864      	ldr	r4, [r4, #4]
 8004d06:	e7ac      	b.n	8004c62 <_malloc_r+0x36>
 8004d08:	4634      	mov	r4, r6
 8004d0a:	6876      	ldr	r6, [r6, #4]
 8004d0c:	e7b4      	b.n	8004c78 <_malloc_r+0x4c>
 8004d0e:	4613      	mov	r3, r2
 8004d10:	e7cc      	b.n	8004cac <_malloc_r+0x80>
 8004d12:	230c      	movs	r3, #12
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4638      	mov	r0, r7
 8004d18:	f000 f80e 	bl	8004d38 <__malloc_unlock>
 8004d1c:	e797      	b.n	8004c4e <_malloc_r+0x22>
 8004d1e:	6025      	str	r5, [r4, #0]
 8004d20:	e7dc      	b.n	8004cdc <_malloc_r+0xb0>
 8004d22:	605b      	str	r3, [r3, #4]
 8004d24:	deff      	udf	#255	; 0xff
 8004d26:	bf00      	nop
 8004d28:	20000374 	.word	0x20000374

08004d2c <__malloc_lock>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	; (8004d34 <__malloc_lock+0x8>)
 8004d2e:	f7ff bf0e 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 8004d32:	bf00      	nop
 8004d34:	20000370 	.word	0x20000370

08004d38 <__malloc_unlock>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__malloc_unlock+0x8>)
 8004d3a:	f7ff bf09 	b.w	8004b50 <__retarget_lock_release_recursive>
 8004d3e:	bf00      	nop
 8004d40:	20000370 	.word	0x20000370

08004d44 <__sfputc_r>:
 8004d44:	6893      	ldr	r3, [r2, #8]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	b410      	push	{r4}
 8004d4c:	6093      	str	r3, [r2, #8]
 8004d4e:	da08      	bge.n	8004d62 <__sfputc_r+0x1e>
 8004d50:	6994      	ldr	r4, [r2, #24]
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	db01      	blt.n	8004d5a <__sfputc_r+0x16>
 8004d56:	290a      	cmp	r1, #10
 8004d58:	d103      	bne.n	8004d62 <__sfputc_r+0x1e>
 8004d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d5e:	f000 bb73 	b.w	8005448 <__swbuf_r>
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	1c58      	adds	r0, r3, #1
 8004d66:	6010      	str	r0, [r2, #0]
 8004d68:	7019      	strb	r1, [r3, #0]
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <__sfputs_r>:
 8004d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d74:	4606      	mov	r6, r0
 8004d76:	460f      	mov	r7, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	18d5      	adds	r5, r2, r3
 8004d7c:	42ac      	cmp	r4, r5
 8004d7e:	d101      	bne.n	8004d84 <__sfputs_r+0x12>
 8004d80:	2000      	movs	r0, #0
 8004d82:	e007      	b.n	8004d94 <__sfputs_r+0x22>
 8004d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d88:	463a      	mov	r2, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff ffda 	bl	8004d44 <__sfputc_r>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d1f3      	bne.n	8004d7c <__sfputs_r+0xa>
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d98 <_vfiprintf_r>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	b09d      	sub	sp, #116	; 0x74
 8004da0:	4614      	mov	r4, r2
 8004da2:	4698      	mov	r8, r3
 8004da4:	4606      	mov	r6, r0
 8004da6:	b118      	cbz	r0, 8004db0 <_vfiprintf_r+0x18>
 8004da8:	6a03      	ldr	r3, [r0, #32]
 8004daa:	b90b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x18>
 8004dac:	f7ff fdca 	bl	8004944 <__sinit>
 8004db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004db2:	07d9      	lsls	r1, r3, #31
 8004db4:	d405      	bmi.n	8004dc2 <_vfiprintf_r+0x2a>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	059a      	lsls	r2, r3, #22
 8004dba:	d402      	bmi.n	8004dc2 <_vfiprintf_r+0x2a>
 8004dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dbe:	f7ff fec6 	bl	8004b4e <__retarget_lock_acquire_recursive>
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	d501      	bpl.n	8004dcc <_vfiprintf_r+0x34>
 8004dc8:	692b      	ldr	r3, [r5, #16]
 8004dca:	b99b      	cbnz	r3, 8004df4 <_vfiprintf_r+0x5c>
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 fb78 	bl	80054c4 <__swsetup_r>
 8004dd4:	b170      	cbz	r0, 8004df4 <_vfiprintf_r+0x5c>
 8004dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dd8:	07dc      	lsls	r4, r3, #31
 8004dda:	d504      	bpl.n	8004de6 <_vfiprintf_r+0x4e>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	b01d      	add	sp, #116	; 0x74
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	0598      	lsls	r0, r3, #22
 8004dea:	d4f7      	bmi.n	8004ddc <_vfiprintf_r+0x44>
 8004dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dee:	f7ff feaf 	bl	8004b50 <__retarget_lock_release_recursive>
 8004df2:	e7f3      	b.n	8004ddc <_vfiprintf_r+0x44>
 8004df4:	2300      	movs	r3, #0
 8004df6:	9309      	str	r3, [sp, #36]	; 0x24
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e02:	2330      	movs	r3, #48	; 0x30
 8004e04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004fb8 <_vfiprintf_r+0x220>
 8004e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e0c:	f04f 0901 	mov.w	r9, #1
 8004e10:	4623      	mov	r3, r4
 8004e12:	469a      	mov	sl, r3
 8004e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e18:	b10a      	cbz	r2, 8004e1e <_vfiprintf_r+0x86>
 8004e1a:	2a25      	cmp	r2, #37	; 0x25
 8004e1c:	d1f9      	bne.n	8004e12 <_vfiprintf_r+0x7a>
 8004e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e22:	d00b      	beq.n	8004e3c <_vfiprintf_r+0xa4>
 8004e24:	465b      	mov	r3, fp
 8004e26:	4622      	mov	r2, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff ffa1 	bl	8004d72 <__sfputs_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	f000 80a9 	beq.w	8004f88 <_vfiprintf_r+0x1f0>
 8004e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e38:	445a      	add	r2, fp
 8004e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80a1 	beq.w	8004f88 <_vfiprintf_r+0x1f0>
 8004e46:	2300      	movs	r3, #0
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e50:	f10a 0a01 	add.w	sl, sl, #1
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e5e:	4654      	mov	r4, sl
 8004e60:	2205      	movs	r2, #5
 8004e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e66:	4854      	ldr	r0, [pc, #336]	; (8004fb8 <_vfiprintf_r+0x220>)
 8004e68:	f7fb f9ba 	bl	80001e0 <memchr>
 8004e6c:	9a04      	ldr	r2, [sp, #16]
 8004e6e:	b9d8      	cbnz	r0, 8004ea8 <_vfiprintf_r+0x110>
 8004e70:	06d1      	lsls	r1, r2, #27
 8004e72:	bf44      	itt	mi
 8004e74:	2320      	movmi	r3, #32
 8004e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e7a:	0713      	lsls	r3, r2, #28
 8004e7c:	bf44      	itt	mi
 8004e7e:	232b      	movmi	r3, #43	; 0x2b
 8004e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e84:	f89a 3000 	ldrb.w	r3, [sl]
 8004e88:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8a:	d015      	beq.n	8004eb8 <_vfiprintf_r+0x120>
 8004e8c:	9a07      	ldr	r2, [sp, #28]
 8004e8e:	4654      	mov	r4, sl
 8004e90:	2000      	movs	r0, #0
 8004e92:	f04f 0c0a 	mov.w	ip, #10
 8004e96:	4621      	mov	r1, r4
 8004e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9c:	3b30      	subs	r3, #48	; 0x30
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d94d      	bls.n	8004f3e <_vfiprintf_r+0x1a6>
 8004ea2:	b1b0      	cbz	r0, 8004ed2 <_vfiprintf_r+0x13a>
 8004ea4:	9207      	str	r2, [sp, #28]
 8004ea6:	e014      	b.n	8004ed2 <_vfiprintf_r+0x13a>
 8004ea8:	eba0 0308 	sub.w	r3, r0, r8
 8004eac:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	46a2      	mov	sl, r4
 8004eb6:	e7d2      	b.n	8004e5e <_vfiprintf_r+0xc6>
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	9103      	str	r1, [sp, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bfbb      	ittet	lt
 8004ec4:	425b      	neglt	r3, r3
 8004ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8004eca:	9307      	strge	r3, [sp, #28]
 8004ecc:	9307      	strlt	r3, [sp, #28]
 8004ece:	bfb8      	it	lt
 8004ed0:	9204      	strlt	r2, [sp, #16]
 8004ed2:	7823      	ldrb	r3, [r4, #0]
 8004ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed6:	d10c      	bne.n	8004ef2 <_vfiprintf_r+0x15a>
 8004ed8:	7863      	ldrb	r3, [r4, #1]
 8004eda:	2b2a      	cmp	r3, #42	; 0x2a
 8004edc:	d134      	bne.n	8004f48 <_vfiprintf_r+0x1b0>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	9203      	str	r2, [sp, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bfb8      	it	lt
 8004eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eee:	3402      	adds	r4, #2
 8004ef0:	9305      	str	r3, [sp, #20]
 8004ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004fc8 <_vfiprintf_r+0x230>
 8004ef6:	7821      	ldrb	r1, [r4, #0]
 8004ef8:	2203      	movs	r2, #3
 8004efa:	4650      	mov	r0, sl
 8004efc:	f7fb f970 	bl	80001e0 <memchr>
 8004f00:	b138      	cbz	r0, 8004f12 <_vfiprintf_r+0x17a>
 8004f02:	9b04      	ldr	r3, [sp, #16]
 8004f04:	eba0 000a 	sub.w	r0, r0, sl
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	4082      	lsls	r2, r0
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	3401      	adds	r4, #1
 8004f10:	9304      	str	r3, [sp, #16]
 8004f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f16:	4829      	ldr	r0, [pc, #164]	; (8004fbc <_vfiprintf_r+0x224>)
 8004f18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f1c:	2206      	movs	r2, #6
 8004f1e:	f7fb f95f 	bl	80001e0 <memchr>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d03f      	beq.n	8004fa6 <_vfiprintf_r+0x20e>
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <_vfiprintf_r+0x228>)
 8004f28:	bb1b      	cbnz	r3, 8004f72 <_vfiprintf_r+0x1da>
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	3307      	adds	r3, #7
 8004f2e:	f023 0307 	bic.w	r3, r3, #7
 8004f32:	3308      	adds	r3, #8
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f38:	443b      	add	r3, r7
 8004f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3c:	e768      	b.n	8004e10 <_vfiprintf_r+0x78>
 8004f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f42:	460c      	mov	r4, r1
 8004f44:	2001      	movs	r0, #1
 8004f46:	e7a6      	b.n	8004e96 <_vfiprintf_r+0xfe>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	3401      	adds	r4, #1
 8004f4c:	9305      	str	r3, [sp, #20]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	f04f 0c0a 	mov.w	ip, #10
 8004f54:	4620      	mov	r0, r4
 8004f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5a:	3a30      	subs	r2, #48	; 0x30
 8004f5c:	2a09      	cmp	r2, #9
 8004f5e:	d903      	bls.n	8004f68 <_vfiprintf_r+0x1d0>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0c6      	beq.n	8004ef2 <_vfiprintf_r+0x15a>
 8004f64:	9105      	str	r1, [sp, #20]
 8004f66:	e7c4      	b.n	8004ef2 <_vfiprintf_r+0x15a>
 8004f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e7f0      	b.n	8004f54 <_vfiprintf_r+0x1bc>
 8004f72:	ab03      	add	r3, sp, #12
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	462a      	mov	r2, r5
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <_vfiprintf_r+0x22c>)
 8004f7a:	a904      	add	r1, sp, #16
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f3af 8000 	nop.w
 8004f82:	4607      	mov	r7, r0
 8004f84:	1c78      	adds	r0, r7, #1
 8004f86:	d1d6      	bne.n	8004f36 <_vfiprintf_r+0x19e>
 8004f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f8a:	07d9      	lsls	r1, r3, #31
 8004f8c:	d405      	bmi.n	8004f9a <_vfiprintf_r+0x202>
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	059a      	lsls	r2, r3, #22
 8004f92:	d402      	bmi.n	8004f9a <_vfiprintf_r+0x202>
 8004f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f96:	f7ff fddb 	bl	8004b50 <__retarget_lock_release_recursive>
 8004f9a:	89ab      	ldrh	r3, [r5, #12]
 8004f9c:	065b      	lsls	r3, r3, #25
 8004f9e:	f53f af1d 	bmi.w	8004ddc <_vfiprintf_r+0x44>
 8004fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fa4:	e71c      	b.n	8004de0 <_vfiprintf_r+0x48>
 8004fa6:	ab03      	add	r3, sp, #12
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	462a      	mov	r2, r5
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <_vfiprintf_r+0x22c>)
 8004fae:	a904      	add	r1, sp, #16
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f000 f879 	bl	80050a8 <_printf_i>
 8004fb6:	e7e4      	b.n	8004f82 <_vfiprintf_r+0x1ea>
 8004fb8:	080056f0 	.word	0x080056f0
 8004fbc:	080056fa 	.word	0x080056fa
 8004fc0:	00000000 	.word	0x00000000
 8004fc4:	08004d73 	.word	0x08004d73
 8004fc8:	080056f6 	.word	0x080056f6

08004fcc <_printf_common>:
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	4616      	mov	r6, r2
 8004fd2:	4699      	mov	r9, r3
 8004fd4:	688a      	ldr	r2, [r1, #8]
 8004fd6:	690b      	ldr	r3, [r1, #16]
 8004fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	bfb8      	it	lt
 8004fe0:	4613      	movlt	r3, r2
 8004fe2:	6033      	str	r3, [r6, #0]
 8004fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe8:	4607      	mov	r7, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	b10a      	cbz	r2, 8004ff2 <_printf_common+0x26>
 8004fee:	3301      	adds	r3, #1
 8004ff0:	6033      	str	r3, [r6, #0]
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	0699      	lsls	r1, r3, #26
 8004ff6:	bf42      	ittt	mi
 8004ff8:	6833      	ldrmi	r3, [r6, #0]
 8004ffa:	3302      	addmi	r3, #2
 8004ffc:	6033      	strmi	r3, [r6, #0]
 8004ffe:	6825      	ldr	r5, [r4, #0]
 8005000:	f015 0506 	ands.w	r5, r5, #6
 8005004:	d106      	bne.n	8005014 <_printf_common+0x48>
 8005006:	f104 0a19 	add.w	sl, r4, #25
 800500a:	68e3      	ldr	r3, [r4, #12]
 800500c:	6832      	ldr	r2, [r6, #0]
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	42ab      	cmp	r3, r5
 8005012:	dc26      	bgt.n	8005062 <_printf_common+0x96>
 8005014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005018:	1e13      	subs	r3, r2, #0
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	bf18      	it	ne
 800501e:	2301      	movne	r3, #1
 8005020:	0692      	lsls	r2, r2, #26
 8005022:	d42b      	bmi.n	800507c <_printf_common+0xb0>
 8005024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005028:	4649      	mov	r1, r9
 800502a:	4638      	mov	r0, r7
 800502c:	47c0      	blx	r8
 800502e:	3001      	adds	r0, #1
 8005030:	d01e      	beq.n	8005070 <_printf_common+0xa4>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	6922      	ldr	r2, [r4, #16]
 8005036:	f003 0306 	and.w	r3, r3, #6
 800503a:	2b04      	cmp	r3, #4
 800503c:	bf02      	ittt	eq
 800503e:	68e5      	ldreq	r5, [r4, #12]
 8005040:	6833      	ldreq	r3, [r6, #0]
 8005042:	1aed      	subeq	r5, r5, r3
 8005044:	68a3      	ldr	r3, [r4, #8]
 8005046:	bf0c      	ite	eq
 8005048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800504c:	2500      	movne	r5, #0
 800504e:	4293      	cmp	r3, r2
 8005050:	bfc4      	itt	gt
 8005052:	1a9b      	subgt	r3, r3, r2
 8005054:	18ed      	addgt	r5, r5, r3
 8005056:	2600      	movs	r6, #0
 8005058:	341a      	adds	r4, #26
 800505a:	42b5      	cmp	r5, r6
 800505c:	d11a      	bne.n	8005094 <_printf_common+0xc8>
 800505e:	2000      	movs	r0, #0
 8005060:	e008      	b.n	8005074 <_printf_common+0xa8>
 8005062:	2301      	movs	r3, #1
 8005064:	4652      	mov	r2, sl
 8005066:	4649      	mov	r1, r9
 8005068:	4638      	mov	r0, r7
 800506a:	47c0      	blx	r8
 800506c:	3001      	adds	r0, #1
 800506e:	d103      	bne.n	8005078 <_printf_common+0xac>
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005078:	3501      	adds	r5, #1
 800507a:	e7c6      	b.n	800500a <_printf_common+0x3e>
 800507c:	18e1      	adds	r1, r4, r3
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	2030      	movs	r0, #48	; 0x30
 8005082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005086:	4422      	add	r2, r4
 8005088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800508c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005090:	3302      	adds	r3, #2
 8005092:	e7c7      	b.n	8005024 <_printf_common+0x58>
 8005094:	2301      	movs	r3, #1
 8005096:	4622      	mov	r2, r4
 8005098:	4649      	mov	r1, r9
 800509a:	4638      	mov	r0, r7
 800509c:	47c0      	blx	r8
 800509e:	3001      	adds	r0, #1
 80050a0:	d0e6      	beq.n	8005070 <_printf_common+0xa4>
 80050a2:	3601      	adds	r6, #1
 80050a4:	e7d9      	b.n	800505a <_printf_common+0x8e>
	...

080050a8 <_printf_i>:
 80050a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	7e0f      	ldrb	r7, [r1, #24]
 80050ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050b0:	2f78      	cmp	r7, #120	; 0x78
 80050b2:	4691      	mov	r9, r2
 80050b4:	4680      	mov	r8, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	469a      	mov	sl, r3
 80050ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050be:	d807      	bhi.n	80050d0 <_printf_i+0x28>
 80050c0:	2f62      	cmp	r7, #98	; 0x62
 80050c2:	d80a      	bhi.n	80050da <_printf_i+0x32>
 80050c4:	2f00      	cmp	r7, #0
 80050c6:	f000 80d4 	beq.w	8005272 <_printf_i+0x1ca>
 80050ca:	2f58      	cmp	r7, #88	; 0x58
 80050cc:	f000 80c0 	beq.w	8005250 <_printf_i+0x1a8>
 80050d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050d8:	e03a      	b.n	8005150 <_printf_i+0xa8>
 80050da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050de:	2b15      	cmp	r3, #21
 80050e0:	d8f6      	bhi.n	80050d0 <_printf_i+0x28>
 80050e2:	a101      	add	r1, pc, #4	; (adr r1, 80050e8 <_printf_i+0x40>)
 80050e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e8:	08005141 	.word	0x08005141
 80050ec:	08005155 	.word	0x08005155
 80050f0:	080050d1 	.word	0x080050d1
 80050f4:	080050d1 	.word	0x080050d1
 80050f8:	080050d1 	.word	0x080050d1
 80050fc:	080050d1 	.word	0x080050d1
 8005100:	08005155 	.word	0x08005155
 8005104:	080050d1 	.word	0x080050d1
 8005108:	080050d1 	.word	0x080050d1
 800510c:	080050d1 	.word	0x080050d1
 8005110:	080050d1 	.word	0x080050d1
 8005114:	08005259 	.word	0x08005259
 8005118:	08005181 	.word	0x08005181
 800511c:	08005213 	.word	0x08005213
 8005120:	080050d1 	.word	0x080050d1
 8005124:	080050d1 	.word	0x080050d1
 8005128:	0800527b 	.word	0x0800527b
 800512c:	080050d1 	.word	0x080050d1
 8005130:	08005181 	.word	0x08005181
 8005134:	080050d1 	.word	0x080050d1
 8005138:	080050d1 	.word	0x080050d1
 800513c:	0800521b 	.word	0x0800521b
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	1d1a      	adds	r2, r3, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	602a      	str	r2, [r5, #0]
 8005148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800514c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005150:	2301      	movs	r3, #1
 8005152:	e09f      	b.n	8005294 <_printf_i+0x1ec>
 8005154:	6820      	ldr	r0, [r4, #0]
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	0607      	lsls	r7, r0, #24
 800515a:	f103 0104 	add.w	r1, r3, #4
 800515e:	6029      	str	r1, [r5, #0]
 8005160:	d501      	bpl.n	8005166 <_printf_i+0xbe>
 8005162:	681e      	ldr	r6, [r3, #0]
 8005164:	e003      	b.n	800516e <_printf_i+0xc6>
 8005166:	0646      	lsls	r6, r0, #25
 8005168:	d5fb      	bpl.n	8005162 <_printf_i+0xba>
 800516a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800516e:	2e00      	cmp	r6, #0
 8005170:	da03      	bge.n	800517a <_printf_i+0xd2>
 8005172:	232d      	movs	r3, #45	; 0x2d
 8005174:	4276      	negs	r6, r6
 8005176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517a:	485a      	ldr	r0, [pc, #360]	; (80052e4 <_printf_i+0x23c>)
 800517c:	230a      	movs	r3, #10
 800517e:	e012      	b.n	80051a6 <_printf_i+0xfe>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	6820      	ldr	r0, [r4, #0]
 8005184:	1d19      	adds	r1, r3, #4
 8005186:	6029      	str	r1, [r5, #0]
 8005188:	0605      	lsls	r5, r0, #24
 800518a:	d501      	bpl.n	8005190 <_printf_i+0xe8>
 800518c:	681e      	ldr	r6, [r3, #0]
 800518e:	e002      	b.n	8005196 <_printf_i+0xee>
 8005190:	0641      	lsls	r1, r0, #25
 8005192:	d5fb      	bpl.n	800518c <_printf_i+0xe4>
 8005194:	881e      	ldrh	r6, [r3, #0]
 8005196:	4853      	ldr	r0, [pc, #332]	; (80052e4 <_printf_i+0x23c>)
 8005198:	2f6f      	cmp	r7, #111	; 0x6f
 800519a:	bf0c      	ite	eq
 800519c:	2308      	moveq	r3, #8
 800519e:	230a      	movne	r3, #10
 80051a0:	2100      	movs	r1, #0
 80051a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051a6:	6865      	ldr	r5, [r4, #4]
 80051a8:	60a5      	str	r5, [r4, #8]
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	bfa2      	ittt	ge
 80051ae:	6821      	ldrge	r1, [r4, #0]
 80051b0:	f021 0104 	bicge.w	r1, r1, #4
 80051b4:	6021      	strge	r1, [r4, #0]
 80051b6:	b90e      	cbnz	r6, 80051bc <_printf_i+0x114>
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	d04b      	beq.n	8005254 <_printf_i+0x1ac>
 80051bc:	4615      	mov	r5, r2
 80051be:	fbb6 f1f3 	udiv	r1, r6, r3
 80051c2:	fb03 6711 	mls	r7, r3, r1, r6
 80051c6:	5dc7      	ldrb	r7, [r0, r7]
 80051c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051cc:	4637      	mov	r7, r6
 80051ce:	42bb      	cmp	r3, r7
 80051d0:	460e      	mov	r6, r1
 80051d2:	d9f4      	bls.n	80051be <_printf_i+0x116>
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d10b      	bne.n	80051f0 <_printf_i+0x148>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	07de      	lsls	r6, r3, #31
 80051dc:	d508      	bpl.n	80051f0 <_printf_i+0x148>
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	6861      	ldr	r1, [r4, #4]
 80051e2:	4299      	cmp	r1, r3
 80051e4:	bfde      	ittt	le
 80051e6:	2330      	movle	r3, #48	; 0x30
 80051e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051f0:	1b52      	subs	r2, r2, r5
 80051f2:	6122      	str	r2, [r4, #16]
 80051f4:	f8cd a000 	str.w	sl, [sp]
 80051f8:	464b      	mov	r3, r9
 80051fa:	aa03      	add	r2, sp, #12
 80051fc:	4621      	mov	r1, r4
 80051fe:	4640      	mov	r0, r8
 8005200:	f7ff fee4 	bl	8004fcc <_printf_common>
 8005204:	3001      	adds	r0, #1
 8005206:	d14a      	bne.n	800529e <_printf_i+0x1f6>
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	b004      	add	sp, #16
 800520e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	f043 0320 	orr.w	r3, r3, #32
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	4833      	ldr	r0, [pc, #204]	; (80052e8 <_printf_i+0x240>)
 800521c:	2778      	movs	r7, #120	; 0x78
 800521e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	6829      	ldr	r1, [r5, #0]
 8005226:	061f      	lsls	r7, r3, #24
 8005228:	f851 6b04 	ldr.w	r6, [r1], #4
 800522c:	d402      	bmi.n	8005234 <_printf_i+0x18c>
 800522e:	065f      	lsls	r7, r3, #25
 8005230:	bf48      	it	mi
 8005232:	b2b6      	uxthmi	r6, r6
 8005234:	07df      	lsls	r7, r3, #31
 8005236:	bf48      	it	mi
 8005238:	f043 0320 	orrmi.w	r3, r3, #32
 800523c:	6029      	str	r1, [r5, #0]
 800523e:	bf48      	it	mi
 8005240:	6023      	strmi	r3, [r4, #0]
 8005242:	b91e      	cbnz	r6, 800524c <_printf_i+0x1a4>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	f023 0320 	bic.w	r3, r3, #32
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	2310      	movs	r3, #16
 800524e:	e7a7      	b.n	80051a0 <_printf_i+0xf8>
 8005250:	4824      	ldr	r0, [pc, #144]	; (80052e4 <_printf_i+0x23c>)
 8005252:	e7e4      	b.n	800521e <_printf_i+0x176>
 8005254:	4615      	mov	r5, r2
 8005256:	e7bd      	b.n	80051d4 <_printf_i+0x12c>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	6826      	ldr	r6, [r4, #0]
 800525c:	6961      	ldr	r1, [r4, #20]
 800525e:	1d18      	adds	r0, r3, #4
 8005260:	6028      	str	r0, [r5, #0]
 8005262:	0635      	lsls	r5, r6, #24
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	d501      	bpl.n	800526c <_printf_i+0x1c4>
 8005268:	6019      	str	r1, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0x1ca>
 800526c:	0670      	lsls	r0, r6, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0x1c0>
 8005270:	8019      	strh	r1, [r3, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	4615      	mov	r5, r2
 8005278:	e7bc      	b.n	80051f4 <_printf_i+0x14c>
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	602a      	str	r2, [r5, #0]
 8005280:	681d      	ldr	r5, [r3, #0]
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	2100      	movs	r1, #0
 8005286:	4628      	mov	r0, r5
 8005288:	f7fa ffaa 	bl	80001e0 <memchr>
 800528c:	b108      	cbz	r0, 8005292 <_printf_i+0x1ea>
 800528e:	1b40      	subs	r0, r0, r5
 8005290:	6060      	str	r0, [r4, #4]
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	2300      	movs	r3, #0
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529c:	e7aa      	b.n	80051f4 <_printf_i+0x14c>
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4649      	mov	r1, r9
 80052a4:	4640      	mov	r0, r8
 80052a6:	47d0      	blx	sl
 80052a8:	3001      	adds	r0, #1
 80052aa:	d0ad      	beq.n	8005208 <_printf_i+0x160>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	079b      	lsls	r3, r3, #30
 80052b0:	d413      	bmi.n	80052da <_printf_i+0x232>
 80052b2:	68e0      	ldr	r0, [r4, #12]
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	4298      	cmp	r0, r3
 80052b8:	bfb8      	it	lt
 80052ba:	4618      	movlt	r0, r3
 80052bc:	e7a6      	b.n	800520c <_printf_i+0x164>
 80052be:	2301      	movs	r3, #1
 80052c0:	4632      	mov	r2, r6
 80052c2:	4649      	mov	r1, r9
 80052c4:	4640      	mov	r0, r8
 80052c6:	47d0      	blx	sl
 80052c8:	3001      	adds	r0, #1
 80052ca:	d09d      	beq.n	8005208 <_printf_i+0x160>
 80052cc:	3501      	adds	r5, #1
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	9903      	ldr	r1, [sp, #12]
 80052d2:	1a5b      	subs	r3, r3, r1
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	dcf2      	bgt.n	80052be <_printf_i+0x216>
 80052d8:	e7eb      	b.n	80052b2 <_printf_i+0x20a>
 80052da:	2500      	movs	r5, #0
 80052dc:	f104 0619 	add.w	r6, r4, #25
 80052e0:	e7f5      	b.n	80052ce <_printf_i+0x226>
 80052e2:	bf00      	nop
 80052e4:	08005701 	.word	0x08005701
 80052e8:	08005712 	.word	0x08005712

080052ec <__sflush_r>:
 80052ec:	898a      	ldrh	r2, [r1, #12]
 80052ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f2:	4605      	mov	r5, r0
 80052f4:	0710      	lsls	r0, r2, #28
 80052f6:	460c      	mov	r4, r1
 80052f8:	d458      	bmi.n	80053ac <__sflush_r+0xc0>
 80052fa:	684b      	ldr	r3, [r1, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dc05      	bgt.n	800530c <__sflush_r+0x20>
 8005300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	dc02      	bgt.n	800530c <__sflush_r+0x20>
 8005306:	2000      	movs	r0, #0
 8005308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800530c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800530e:	2e00      	cmp	r6, #0
 8005310:	d0f9      	beq.n	8005306 <__sflush_r+0x1a>
 8005312:	2300      	movs	r3, #0
 8005314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005318:	682f      	ldr	r7, [r5, #0]
 800531a:	6a21      	ldr	r1, [r4, #32]
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	d032      	beq.n	8005386 <__sflush_r+0x9a>
 8005320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005322:	89a3      	ldrh	r3, [r4, #12]
 8005324:	075a      	lsls	r2, r3, #29
 8005326:	d505      	bpl.n	8005334 <__sflush_r+0x48>
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	1ac0      	subs	r0, r0, r3
 800532c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800532e:	b10b      	cbz	r3, 8005334 <__sflush_r+0x48>
 8005330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005332:	1ac0      	subs	r0, r0, r3
 8005334:	2300      	movs	r3, #0
 8005336:	4602      	mov	r2, r0
 8005338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800533a:	6a21      	ldr	r1, [r4, #32]
 800533c:	4628      	mov	r0, r5
 800533e:	47b0      	blx	r6
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	d106      	bne.n	8005354 <__sflush_r+0x68>
 8005346:	6829      	ldr	r1, [r5, #0]
 8005348:	291d      	cmp	r1, #29
 800534a:	d82b      	bhi.n	80053a4 <__sflush_r+0xb8>
 800534c:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <__sflush_r+0x108>)
 800534e:	410a      	asrs	r2, r1
 8005350:	07d6      	lsls	r6, r2, #31
 8005352:	d427      	bmi.n	80053a4 <__sflush_r+0xb8>
 8005354:	2200      	movs	r2, #0
 8005356:	6062      	str	r2, [r4, #4]
 8005358:	04d9      	lsls	r1, r3, #19
 800535a:	6922      	ldr	r2, [r4, #16]
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	d504      	bpl.n	800536a <__sflush_r+0x7e>
 8005360:	1c42      	adds	r2, r0, #1
 8005362:	d101      	bne.n	8005368 <__sflush_r+0x7c>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b903      	cbnz	r3, 800536a <__sflush_r+0x7e>
 8005368:	6560      	str	r0, [r4, #84]	; 0x54
 800536a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800536c:	602f      	str	r7, [r5, #0]
 800536e:	2900      	cmp	r1, #0
 8005370:	d0c9      	beq.n	8005306 <__sflush_r+0x1a>
 8005372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005376:	4299      	cmp	r1, r3
 8005378:	d002      	beq.n	8005380 <__sflush_r+0x94>
 800537a:	4628      	mov	r0, r5
 800537c:	f7ff fbea 	bl	8004b54 <_free_r>
 8005380:	2000      	movs	r0, #0
 8005382:	6360      	str	r0, [r4, #52]	; 0x34
 8005384:	e7c0      	b.n	8005308 <__sflush_r+0x1c>
 8005386:	2301      	movs	r3, #1
 8005388:	4628      	mov	r0, r5
 800538a:	47b0      	blx	r6
 800538c:	1c41      	adds	r1, r0, #1
 800538e:	d1c8      	bne.n	8005322 <__sflush_r+0x36>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0c5      	beq.n	8005322 <__sflush_r+0x36>
 8005396:	2b1d      	cmp	r3, #29
 8005398:	d001      	beq.n	800539e <__sflush_r+0xb2>
 800539a:	2b16      	cmp	r3, #22
 800539c:	d101      	bne.n	80053a2 <__sflush_r+0xb6>
 800539e:	602f      	str	r7, [r5, #0]
 80053a0:	e7b1      	b.n	8005306 <__sflush_r+0x1a>
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	e7ad      	b.n	8005308 <__sflush_r+0x1c>
 80053ac:	690f      	ldr	r7, [r1, #16]
 80053ae:	2f00      	cmp	r7, #0
 80053b0:	d0a9      	beq.n	8005306 <__sflush_r+0x1a>
 80053b2:	0793      	lsls	r3, r2, #30
 80053b4:	680e      	ldr	r6, [r1, #0]
 80053b6:	bf08      	it	eq
 80053b8:	694b      	ldreq	r3, [r1, #20]
 80053ba:	600f      	str	r7, [r1, #0]
 80053bc:	bf18      	it	ne
 80053be:	2300      	movne	r3, #0
 80053c0:	eba6 0807 	sub.w	r8, r6, r7
 80053c4:	608b      	str	r3, [r1, #8]
 80053c6:	f1b8 0f00 	cmp.w	r8, #0
 80053ca:	dd9c      	ble.n	8005306 <__sflush_r+0x1a>
 80053cc:	6a21      	ldr	r1, [r4, #32]
 80053ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053d0:	4643      	mov	r3, r8
 80053d2:	463a      	mov	r2, r7
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b0      	blx	r6
 80053d8:	2800      	cmp	r0, #0
 80053da:	dc06      	bgt.n	80053ea <__sflush_r+0xfe>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295
 80053e8:	e78e      	b.n	8005308 <__sflush_r+0x1c>
 80053ea:	4407      	add	r7, r0
 80053ec:	eba8 0800 	sub.w	r8, r8, r0
 80053f0:	e7e9      	b.n	80053c6 <__sflush_r+0xda>
 80053f2:	bf00      	nop
 80053f4:	dfbffffe 	.word	0xdfbffffe

080053f8 <_fflush_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	690b      	ldr	r3, [r1, #16]
 80053fc:	4605      	mov	r5, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	b913      	cbnz	r3, 8005408 <_fflush_r+0x10>
 8005402:	2500      	movs	r5, #0
 8005404:	4628      	mov	r0, r5
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	b118      	cbz	r0, 8005412 <_fflush_r+0x1a>
 800540a:	6a03      	ldr	r3, [r0, #32]
 800540c:	b90b      	cbnz	r3, 8005412 <_fflush_r+0x1a>
 800540e:	f7ff fa99 	bl	8004944 <__sinit>
 8005412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f3      	beq.n	8005402 <_fflush_r+0xa>
 800541a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800541c:	07d0      	lsls	r0, r2, #31
 800541e:	d404      	bmi.n	800542a <_fflush_r+0x32>
 8005420:	0599      	lsls	r1, r3, #22
 8005422:	d402      	bmi.n	800542a <_fflush_r+0x32>
 8005424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005426:	f7ff fb92 	bl	8004b4e <__retarget_lock_acquire_recursive>
 800542a:	4628      	mov	r0, r5
 800542c:	4621      	mov	r1, r4
 800542e:	f7ff ff5d 	bl	80052ec <__sflush_r>
 8005432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005434:	07da      	lsls	r2, r3, #31
 8005436:	4605      	mov	r5, r0
 8005438:	d4e4      	bmi.n	8005404 <_fflush_r+0xc>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	059b      	lsls	r3, r3, #22
 800543e:	d4e1      	bmi.n	8005404 <_fflush_r+0xc>
 8005440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005442:	f7ff fb85 	bl	8004b50 <__retarget_lock_release_recursive>
 8005446:	e7dd      	b.n	8005404 <_fflush_r+0xc>

08005448 <__swbuf_r>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	460e      	mov	r6, r1
 800544c:	4614      	mov	r4, r2
 800544e:	4605      	mov	r5, r0
 8005450:	b118      	cbz	r0, 800545a <__swbuf_r+0x12>
 8005452:	6a03      	ldr	r3, [r0, #32]
 8005454:	b90b      	cbnz	r3, 800545a <__swbuf_r+0x12>
 8005456:	f7ff fa75 	bl	8004944 <__sinit>
 800545a:	69a3      	ldr	r3, [r4, #24]
 800545c:	60a3      	str	r3, [r4, #8]
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	071a      	lsls	r2, r3, #28
 8005462:	d525      	bpl.n	80054b0 <__swbuf_r+0x68>
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	b31b      	cbz	r3, 80054b0 <__swbuf_r+0x68>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	6922      	ldr	r2, [r4, #16]
 800546c:	1a98      	subs	r0, r3, r2
 800546e:	6963      	ldr	r3, [r4, #20]
 8005470:	b2f6      	uxtb	r6, r6
 8005472:	4283      	cmp	r3, r0
 8005474:	4637      	mov	r7, r6
 8005476:	dc04      	bgt.n	8005482 <__swbuf_r+0x3a>
 8005478:	4621      	mov	r1, r4
 800547a:	4628      	mov	r0, r5
 800547c:	f7ff ffbc 	bl	80053f8 <_fflush_r>
 8005480:	b9e0      	cbnz	r0, 80054bc <__swbuf_r+0x74>
 8005482:	68a3      	ldr	r3, [r4, #8]
 8005484:	3b01      	subs	r3, #1
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	701e      	strb	r6, [r3, #0]
 8005490:	6962      	ldr	r2, [r4, #20]
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	429a      	cmp	r2, r3
 8005496:	d004      	beq.n	80054a2 <__swbuf_r+0x5a>
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	07db      	lsls	r3, r3, #31
 800549c:	d506      	bpl.n	80054ac <__swbuf_r+0x64>
 800549e:	2e0a      	cmp	r6, #10
 80054a0:	d104      	bne.n	80054ac <__swbuf_r+0x64>
 80054a2:	4621      	mov	r1, r4
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff ffa7 	bl	80053f8 <_fflush_r>
 80054aa:	b938      	cbnz	r0, 80054bc <__swbuf_r+0x74>
 80054ac:	4638      	mov	r0, r7
 80054ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f806 	bl	80054c4 <__swsetup_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d0d5      	beq.n	8005468 <__swbuf_r+0x20>
 80054bc:	f04f 37ff 	mov.w	r7, #4294967295
 80054c0:	e7f4      	b.n	80054ac <__swbuf_r+0x64>
	...

080054c4 <__swsetup_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <__swsetup_r+0xac>)
 80054c8:	4605      	mov	r5, r0
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	460c      	mov	r4, r1
 80054ce:	b118      	cbz	r0, 80054d8 <__swsetup_r+0x14>
 80054d0:	6a03      	ldr	r3, [r0, #32]
 80054d2:	b90b      	cbnz	r3, 80054d8 <__swsetup_r+0x14>
 80054d4:	f7ff fa36 	bl	8004944 <__sinit>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054de:	0718      	lsls	r0, r3, #28
 80054e0:	d422      	bmi.n	8005528 <__swsetup_r+0x64>
 80054e2:	06d9      	lsls	r1, r3, #27
 80054e4:	d407      	bmi.n	80054f6 <__swsetup_r+0x32>
 80054e6:	2309      	movs	r3, #9
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	e034      	b.n	8005560 <__swsetup_r+0x9c>
 80054f6:	0758      	lsls	r0, r3, #29
 80054f8:	d512      	bpl.n	8005520 <__swsetup_r+0x5c>
 80054fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054fc:	b141      	cbz	r1, 8005510 <__swsetup_r+0x4c>
 80054fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005502:	4299      	cmp	r1, r3
 8005504:	d002      	beq.n	800550c <__swsetup_r+0x48>
 8005506:	4628      	mov	r0, r5
 8005508:	f7ff fb24 	bl	8004b54 <_free_r>
 800550c:	2300      	movs	r3, #0
 800550e:	6363      	str	r3, [r4, #52]	; 0x34
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	2300      	movs	r3, #0
 800551a:	6063      	str	r3, [r4, #4]
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	f043 0308 	orr.w	r3, r3, #8
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	6923      	ldr	r3, [r4, #16]
 800552a:	b94b      	cbnz	r3, 8005540 <__swsetup_r+0x7c>
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005536:	d003      	beq.n	8005540 <__swsetup_r+0x7c>
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	f000 f850 	bl	80055e0 <__smakebuf_r>
 8005540:	89a0      	ldrh	r0, [r4, #12]
 8005542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005546:	f010 0301 	ands.w	r3, r0, #1
 800554a:	d00a      	beq.n	8005562 <__swsetup_r+0x9e>
 800554c:	2300      	movs	r3, #0
 800554e:	60a3      	str	r3, [r4, #8]
 8005550:	6963      	ldr	r3, [r4, #20]
 8005552:	425b      	negs	r3, r3
 8005554:	61a3      	str	r3, [r4, #24]
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	b943      	cbnz	r3, 800556c <__swsetup_r+0xa8>
 800555a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800555e:	d1c4      	bne.n	80054ea <__swsetup_r+0x26>
 8005560:	bd38      	pop	{r3, r4, r5, pc}
 8005562:	0781      	lsls	r1, r0, #30
 8005564:	bf58      	it	pl
 8005566:	6963      	ldrpl	r3, [r4, #20]
 8005568:	60a3      	str	r3, [r4, #8]
 800556a:	e7f4      	b.n	8005556 <__swsetup_r+0x92>
 800556c:	2000      	movs	r0, #0
 800556e:	e7f7      	b.n	8005560 <__swsetup_r+0x9c>
 8005570:	20000064 	.word	0x20000064

08005574 <_sbrk_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d06      	ldr	r5, [pc, #24]	; (8005590 <_sbrk_r+0x1c>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fb fb74 	bl	8000c6c <_sbrk>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_sbrk_r+0x1a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_sbrk_r+0x1a>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	2000036c 	.word	0x2000036c

08005594 <__swhatbuf_r>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	460c      	mov	r4, r1
 8005598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559c:	2900      	cmp	r1, #0
 800559e:	b096      	sub	sp, #88	; 0x58
 80055a0:	4615      	mov	r5, r2
 80055a2:	461e      	mov	r6, r3
 80055a4:	da0d      	bge.n	80055c2 <__swhatbuf_r+0x2e>
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	bf0c      	ite	eq
 80055b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80055b6:	2340      	movne	r3, #64	; 0x40
 80055b8:	2000      	movs	r0, #0
 80055ba:	6031      	str	r1, [r6, #0]
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	b016      	add	sp, #88	; 0x58
 80055c0:	bd70      	pop	{r4, r5, r6, pc}
 80055c2:	466a      	mov	r2, sp
 80055c4:	f000 f848 	bl	8005658 <_fstat_r>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	dbec      	blt.n	80055a6 <__swhatbuf_r+0x12>
 80055cc:	9901      	ldr	r1, [sp, #4]
 80055ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80055d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055d6:	4259      	negs	r1, r3
 80055d8:	4159      	adcs	r1, r3
 80055da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055de:	e7eb      	b.n	80055b8 <__swhatbuf_r+0x24>

080055e0 <__smakebuf_r>:
 80055e0:	898b      	ldrh	r3, [r1, #12]
 80055e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055e4:	079d      	lsls	r5, r3, #30
 80055e6:	4606      	mov	r6, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	d507      	bpl.n	80055fc <__smakebuf_r+0x1c>
 80055ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	6123      	str	r3, [r4, #16]
 80055f4:	2301      	movs	r3, #1
 80055f6:	6163      	str	r3, [r4, #20]
 80055f8:	b002      	add	sp, #8
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	ab01      	add	r3, sp, #4
 80055fe:	466a      	mov	r2, sp
 8005600:	f7ff ffc8 	bl	8005594 <__swhatbuf_r>
 8005604:	9900      	ldr	r1, [sp, #0]
 8005606:	4605      	mov	r5, r0
 8005608:	4630      	mov	r0, r6
 800560a:	f7ff fb0f 	bl	8004c2c <_malloc_r>
 800560e:	b948      	cbnz	r0, 8005624 <__smakebuf_r+0x44>
 8005610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005614:	059a      	lsls	r2, r3, #22
 8005616:	d4ef      	bmi.n	80055f8 <__smakebuf_r+0x18>
 8005618:	f023 0303 	bic.w	r3, r3, #3
 800561c:	f043 0302 	orr.w	r3, r3, #2
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	e7e3      	b.n	80055ec <__smakebuf_r+0xc>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	6020      	str	r0, [r4, #0]
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	9b00      	ldr	r3, [sp, #0]
 8005630:	6163      	str	r3, [r4, #20]
 8005632:	9b01      	ldr	r3, [sp, #4]
 8005634:	6120      	str	r0, [r4, #16]
 8005636:	b15b      	cbz	r3, 8005650 <__smakebuf_r+0x70>
 8005638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800563c:	4630      	mov	r0, r6
 800563e:	f000 f81d 	bl	800567c <_isatty_r>
 8005642:	b128      	cbz	r0, 8005650 <__smakebuf_r+0x70>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	431d      	orrs	r5, r3
 8005654:	81a5      	strh	r5, [r4, #12]
 8005656:	e7cf      	b.n	80055f8 <__smakebuf_r+0x18>

08005658 <_fstat_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d07      	ldr	r5, [pc, #28]	; (8005678 <_fstat_r+0x20>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	f7fb fad8 	bl	8000c1a <_fstat>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d102      	bne.n	8005674 <_fstat_r+0x1c>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	b103      	cbz	r3, 8005674 <_fstat_r+0x1c>
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	bd38      	pop	{r3, r4, r5, pc}
 8005676:	bf00      	nop
 8005678:	2000036c 	.word	0x2000036c

0800567c <_isatty_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d06      	ldr	r5, [pc, #24]	; (8005698 <_isatty_r+0x1c>)
 8005680:	2300      	movs	r3, #0
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fb fad7 	bl	8000c3a <_isatty>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_isatty_r+0x1a>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_isatty_r+0x1a>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	2000036c 	.word	0x2000036c

0800569c <_init>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr

080056a8 <_fini>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr
